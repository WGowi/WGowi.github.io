<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Gowi&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-11-11T10:38:38.550Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Gowi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>NAO机器人的小记</title>
    <link href="http://yoursite.com/2019/11/10/NAO%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%9A%84%E5%B0%8F%E8%AE%B0-1/"/>
    <id>http://yoursite.com/2019/11/10/NAO机器人的小记-1/</id>
    <published>2019-11-10T13:09:14.000Z</published>
    <updated>2019-11-11T10:38:38.550Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NAO机器人的小记"><a href="#NAO机器人的小记" class="headerlink" title="NAO机器人的小记"></a>NAO机器人的小记</h1><p>@[toc]</p><h2 id="joint"><a href="#joint" class="headerlink" title="joint"></a>joint</h2><p><img src="https://img-blog.csdnimg.cn/20191104225451107.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20191105192903595.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/2019110519293516.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20191105193010407.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20191105193049921.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20191105193118457.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/201911051931531.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/201911051932129.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191104225505801.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20191104225518804.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20191104225526624.jpeg" alt="在这里插入图片描述"></p><h2 id="摄像机相关参数"><a href="#摄像机相关参数" class="headerlink" title="摄像机相关参数"></a>摄像机相关参数</h2><p><img src="https://img-blog.csdnimg.cn/20191105103134521.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20191105103152174.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20191105103213812.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><h3 id="ALAutonomousLife"><a href="#ALAutonomousLife" class="headerlink" title="ALAutonomousLife"></a>ALAutonomousLife</h3><h4 id="孤立状态solitary"><a href="#孤立状态solitary" class="headerlink" title="孤立状态solitary"></a>孤立状态solitary</h4><p>任何活动都可以通过ALAutonomousLifeProxy :: switchFocus（）启动。<br>启动交互式Activity将切换到交互状态。<br>在保障和禁用状态可以进入。<br>无法停止自动启动板，其建议的活动将自动聚焦，可能会中断正在运行的活动。</p><h4 id="交互状态interactive"><a href="#交互状态interactive" class="headerlink" title="交互状态interactive"></a>交互状态interactive</h4><p>可以通过ALAutonomousLifeProxy :: switchFocus（）启动交互式活动<br>聚焦新的交互式Activity将重新进入交互状态。<br>孤立活动可能无法启动，这将导致孤立状态强制执行其规则并与用户创建不良生命周期。（这可能在未来发生变化）<br>在保障和禁用状态可入以被输。<br>自动启动板可以启动，它不会强制关注其建议。它不会中断正在运行的Activity。<br>当整个交互活动堆栈退出时，将进入单独状态。<br>当所有人都失去时，互动活动将被强行退出。（这尚未实施）</p><h4 id="禁用状态disabled"><a href="#禁用状态disabled" class="headerlink" title="禁用状态disabled"></a>禁用状态disabled</h4><p>没有Activity可以通过ALAutonomousLifeProxy :: switchFocus（）启动<br>无法启动自动启动板。<br>该保障或交互状态可能无法进入。<br>（可调用ALAutonomousLifeProxy :: setState（）退出此状态）</p><h4 id="保护状态safeguard"><a href="#保护状态safeguard" class="headerlink" title="保护状态safeguard"></a>保护状态safeguard</h4><p>没有Activity可以通过ALAutonomousLifeProxy :: switchFocus（）启动</p><p>停止聚焦活动并清除堆栈。<br>基本意识和呼吸服务如果正在运行则会停止。<br>自动启动板已停止。<br>然后处理反射。<br>根据反射的结果，可以重新进入孤立状态。<br>（对于损坏的硬件，机器人不会退出保护状态。<br>对于过热，机器人在充分冷却后退出保护状态。）</p><h3 id="ALRobotPosture"><a href="#ALRobotPosture" class="headerlink" title="ALRobotPosture"></a>ALRobotPosture</h3><h4 id="ALRobotPostureProxy-getPostureList"><a href="#ALRobotPostureProxy-getPostureList" class="headerlink" title="ALRobotPostureProxy :: getPostureList"></a>ALRobotPostureProxy :: getPostureList</h4><p><img src="https://img-blog.csdnimg.cn/20191104230057138.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191104230114105.png" alt="在这里插入图片描述"></p><blockquote><p>std :: vector <std :: string> ALRobotPostureProxy :: getPostureList （）<br> 返回：所有预定义姿势的矢量（名称）</std></p></blockquote><h4 id="ALRobotPostureProxy-getPosture"><a href="#ALRobotPostureProxy-getPosture" class="headerlink" title="ALRobotPostureProxy :: getPosture"></a>ALRobotPostureProxy :: getPosture</h4><p><img src="https://img-blog.csdnimg.cn/20191104230239651.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191104230134678.png" alt="在这里插入图片描述"></p><blockquote><p>std :: string ALRobotPostureProxy :: getPosture （）<br> 返回当前预定义姿势的名称。如果当前姿势不在预定义姿势中，则返回“未知”。</p></blockquote><h4 id="ALRobotPostureProxy-goToPosture"><a href="#ALRobotPostureProxy-goToPosture" class="headerlink" title="ALRobotPostureProxy :: goToPosture"></a>ALRobotPostureProxy :: goToPosture</h4><p><img src="https://img-blog.csdnimg.cn/20191104230317205.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2019110423015094.png" alt="在这里插入图片描述"></p><blockquote><p>bool ALRobotPostureProxy :: goToPosture （const std :: string postureName，const float speed ）<br> 使机器人进入参数中要求的预定义姿势。可以修改移动的速度。移动是“智能的”：它将从机器人的开始姿势开始，并选择所有步骤以达到要求的姿势。<br>这是一个阻塞调用。</p></blockquote><h3 id="ALMotion"><a href="#ALMotion" class="headerlink" title="ALMotion"></a>ALMotion</h3><h4 id="ALMotionProxy-setStiffnesses"><a href="#ALMotionProxy-setStiffnesses" class="headerlink" title="ALMotionProxy :: setStiffnesses"></a>ALMotionProxy :: setStiffnesses</h4><p><img src="https://img-blog.csdnimg.cn/20191104131335978.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191104131356447.png" alt="在这里插入图片描述"></p><blockquote><p>void ALMotionProxy :: setStiffnesses （const AL :: ALValue＆ names，const AL :: ALValue＆ stiffnesses ）<br>设置一个或多个关节的刚度。这是一个非阻塞调用。<br>names - 关节，链条，“主体”，“JointActuators”，“接头”或“执行器”的名称。<br>stiffnesses - 零和一之间的一个或多个刚度。</p></blockquote><p>示例：<br>＃显示如何将刚度设置为1.0 。<br>    ＃注意，这样做可能很危险，使用<br>    ＃stiffnessInterpolation方法更安全，该方法需要持续时间参数。<br>    names =’Body’<br>    ＃如果只接收到一个参数，这将应用于所有关节<br>    stiffnesses  = 1.0<br>    motionProxy.setStiffnesses(names, stiffnesses)</p><h4 id="ALMotionProxy-getStiffnesses"><a href="#ALMotionProxy-getStiffnesses" class="headerlink" title="ALMotionProxy :: getStiffnesses"></a>ALMotionProxy :: getStiffnesses</h4><p><img src="https://img-blog.csdnimg.cn/20191104132344624.png" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20191104132206648.png" alt="在这里插入图片描述"></p><blockquote><p>std::vector<float>ALMotionProxy::getStiffnesses(const AL::ALValue&amp; jointName)<br>获取关节或关节组的刚度<br>jointName - 关节，链，“Body”，“JointActuators”，“Joints”或“Actuators”的名称。<br>返回：一个或多个刚度。1.0表示最大刚度。0.0表示最小刚度</float></p></blockquote><h4 id="ALMotionProxy-angleInterpolation"><a href="#ALMotionProxy-angleInterpolation" class="headerlink" title="ALMotionProxy :: angleInterpolation"></a>ALMotionProxy :: angleInterpolation</h4><p><img src="https://img-blog.csdnimg.cn/20191105125616364.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20191105125644456.png" alt="在这里插入图片描述"></p><blockquote><p>void ALMotionProxy :: angleInterpolation （const AL :: ALValue＆ names，const AL :: ALValue＆ angleLists，const AL :: ALValue＆ timeLists，const bool＆isAbsolute ）<br>将一个或多个关节插值到目标角度或沿着定时轨迹。这是一个阻塞调用。<br>names– 关节，链条，“主体”，“JointActuators”，“接头”或“执行器”的名称或名称。<br>angleLists - 以弧度表示的角度，角度列表或角度列表列表<br>timeLists - 时间，时间列表或时间列表列表，以秒为单位<br>isAbsolute - 如果为true，则以绝对角度描述运动，否则角度相对于当前角度。</p></blockquote><p>示例：<br>＃显示一个关节的单个目标角度的示例<br>    ＃在1.0秒内将头部偏航插入1.0弧度<br>    names =“HeadYaw”<br>    angleLists = 50.0 * almath.TO_RAD<br>    timeLists = 1.0<br>    isAbsolute = True<br>    motionProxy.angleInterpolation（names，angleLists，timeLists，isAbsolute）</p><p>＃显示一个关节的单个轨迹的示例<br>    ＃将头部偏航插入1.0弧度，并在2.0秒内回零<br>    names =“HeadYaw”<br>    ＃2角度<br>    angleLists = [30.0 * almath.TO_RAD，0.0]<br>    ＃ 2次<br>    timeLists = [1.0,2.0]  #后面的时间一定要比原来的大（timeLists = [1.0,1.0]  报错：times must be increasing 所以应该表示的是总的时间 在1s内转30度 在2s内转30度再转回来 即转回的时间也是1s）<br>    isAbsolute = True<br>    motionProxy.angleInterpolation（names，angleLists，timeLists，isAbsolute）</p><p> ＃显示多个轨迹的示例<br>    names = [“HeadYaw”，“HeadPitch”]<br>    angleLists = [30.0 * almath.TO_RAD，30.0 * almath.TO_RAD] #左下方<br>    timeLists = [1.0,1.2] #（可以为timeLists = [1.0,1.0]）<br>    isAbsolute = True<br>    motionProxy.angleInterpolation（names，angleLists，timeLists，isAbsolute）</p><p>＃显示多个轨迹的示例<br>    ＃将头部偏航插入1.0弧度，并在2.0秒内回零<br>    ＃在长时间内上下插入HeadPitch。<br>    names = [“HeadYaw”，“HeadPitch”]<br>    ＃每个关节可以有不同长度的列表，但数量<br>    ＃角度和每个关节的次数必须相同。<br>    ＃这里，第二个关节（“HeadPitch”）有三个角度，和<br>    ＃三个相应的时间。<br>    angleLists = [[50.0 * almath.TO_RAD，0.0]，<br>                   [-30.0 * almath.TO_RAD，30.0 * almath.TO_RAD，0.0]]<br>    timeLists = [[1.0,2.0]，[1.0,2.0,3.0]]<br>    isAbsolute = True<br>    motionProxy.angleInterpolation（names，angleLists，timeLists，isAbsolute）</p><h4 id="ALMotionProxy-angleInterpolationWithSpeed"><a href="#ALMotionProxy-angleInterpolationWithSpeed" class="headerlink" title="ALMotionProxy :: angleInterpolationWithSpeed"></a>ALMotionProxy :: angleInterpolationWithSpeed</h4><p><img src="https://img-blog.csdnimg.cn/20191104132719458.png" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20191104132757564.png" alt="在这里插入图片描述"></p><blockquote><p>void ALMotionProxy :: angleInterpolationWithSpeed （const AL :: ALValue＆ names，const AL :: ALValue＆targetAngles，const float＆maxSpeedFraction ）<br>使用最大速度的一小部分将一个或多个关节插值到目标角度。每个关节只允许一个目标角度。这是一个阻塞调用。<br>names - 关节，链条，“主体”，“JointActuators”，“接头”或“执行器”的名称或名称。<br>targetAngles - 以弧度表示的角度或角度列表<br>maxSpeedFraction - 一个分数</p></blockquote><p>示例：<br>＃显示一个关节的单个目标的示例<br>    names =“HeadYaw”<br>    targetAngles = 1.0<br>    maxSpeedFraction = 0.2＃使用最大关节速度的20％<br>    motionProxy.angleInterpolationWithSpeed（names，targetAngles，maxSpeedFraction）</p><p>＃显示多个关节的示例<br>    ＃而不是列出每个关节，您可以使用链名称<br>    #bein扩展为包含链中的所有关节。在这种情况下，<br>    ＃“Head”将被解释为[“HeadYaw”，“HeadPitch”]<br>    names =“Head”<br>    ＃我们仍然需要指定正确的目标角度数<br>    targetAngles = [0.5,0.25]<br>    maxSpeedFraction = 0.2＃使用最大关节速度的20％<br>    motionProxy.angleInterpolationWithSpeed（names，targetAngles，maxSpeedFraction）</p><p>＃显示体零位置的示例<br>    ＃而不是列出每个关节，您可以使用名称“Body”<br>    names =’Body’<br>    ＃我们仍然需要指定正确的目标角度数，所以<br>    ＃我们需要找到这个Nao的关节数量。<br>    ＃这里我们使用getBodyNames方法，它告诉我们所有人<br>    ＃别名“Body”中关节的名称。<br>    ＃我们可以将此列表用于“names”参数。<br>     numJoints = len(motionProxy.getBodyNames(“Body”))<br>    ＃列出正确的长度。所有角度都为零。<br>    targetAngles = [0.0] * numJoints<br>    ＃使用最大关节速度的10％<br>    maxSpeedFraction = 0.1<br>    motionProxy.angleInterpolationWithSpeed(names, targetAngles, maxSpeedFraction)</p><h4 id="ALMotionProxy-move"><a href="#ALMotionProxy-move" class="headerlink" title="ALMotionProxy :: move"></a>ALMotionProxy :: move</h4><p><img src="https://img-blog.csdnimg.cn/20191104133003615.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/2019110413302921.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>void ALMotionProxy :: move （const float＆ x，const float＆ y，const float＆theta，const AL :: ALValue moveConfig ）<br>1方法的重载<br>使机器人以给定的速度移动，以FRAME_ROBOT表示，具有移动配置。这是一个非阻塞调用。<br>x - 沿X轴的速度，以米/秒为单位。向后运动使用负值<br>y - 沿Y轴的速度，以米/秒为单位。使用正值向左移动<br>theta - 绕Z轴的速度，以弧度/秒为单位。使用负值顺时针旋转<br>moveConfig - 具有自定义移动配置的ALValue。</p></blockquote><h4 id="ALMotionProxy-moveToward"><a href="#ALMotionProxy-moveToward" class="headerlink" title="ALMotionProxy :: moveToward"></a>ALMotionProxy :: moveToward</h4><p>void ALMotionProxy :: moveToward （const float＆ x，const float＆ y，const float＆theta，const AL :: ALValue moveConfig ）<br>使机器人以给定的标准化速度移动，以FRAME_ROBOT表示，具有移动配置。这是一个非阻塞调用。</p><p>x - 沿X轴标准化，无单位，速度。+1和-1分别对应于前向和后向的最大速度。<br>y - 沿Y轴标准化，无单位，速度。+1和-1分别对应于左右方向上的最大速度。<br>theta-标准化，无单位，绕Z轴的速度。+1和-1分别对应于逆时针和顺时针方向的最大速度<br>moveConfig - 具有自定义移动配置的ALValue。</p><blockquote><p>＃示例显示moveToward的使用<br>    ＃参数是最大值的分数<br>    ＃这里我们要求全速前进<br>    x     = 1.0<br>    y     = 0.0<br>    theta = 0.0<br>    frequency = 1.0<br>    motionProxy.moveToward(x, y, theta, [[“Frequency”, frequency]])<br>＃如果我们不发送另一个命令，他将永远移动<br>    ＃让我们让他慢下来（步长），并打开后3秒<br>time.sleep(3)<br>    x     = 0.5<br>    theta = 0.6<br>motionProxy.moveToward(x, y, theta, [[“Frequency”, frequency]])</p></blockquote><h4 id="ALMotionProxy-setFootStepsWithSpeed"><a href="#ALMotionProxy-setFootStepsWithSpeed" class="headerlink" title="ALMotionProxy :: setFootStepsWithSpeed"></a>ALMotionProxy :: setFootStepsWithSpeed</h4><p><img src="https://img-blog.csdnimg.cn/20191104221101530.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20191104220950289.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt></p><blockquote><p>void ALMotionProxy :: setFootStepsWithSpeed （const std :: vector <std :: string>＆ legName，const AL :: ALValue＆ footSteps，const std :: vector <float>＆ fractionMaxSpeed，const bool＆ clearExisting ）<br>仅限NAO<br>使机器人快速地做足步计划器。这是一个阻塞调用。<br>legName - 要移动的腿的名称（’LLeg’or’RLeg’）<br>footSteps - [x，y，theta]，[沿X / Y的位置，Z轴的方向]，相对于另一个腿，以[米，米，弧度]为单位。必须小于[MaxStepX，MaxStepY，MaxStepTheta]<br>fractionMaxSpeed - 每步脚的速度。必须介于0和1之间<br>clearExisting - 清除现有的脚步</float></std></p></blockquote><p>＃小步前进和逆时针用左脚<br>    legName = [“LLeg”]<br>    X       = 0.04<br>    Y       = 0.1<br>    Theta   = 0.3<br>    footSteps = [[X, Y, Theta]]<br>    fractionMaxSpeed = [1.0]<br>    clearExisting = False<br>    motionProxy.setFootStepsWithSpeed(legName, footSteps, fractionMaxSpeed, clearExisting)</p><p>  ＃小步前进和逆时针用左脚<br>    legName = [“LLeg”, “RLeg”]<br>    X       = 0.04<br>    Y       = 0.1<br>    Theta   = 0.3<br>    footSteps = [[X, Y, Theta], [X, -Y, Theta]]<br>    fractionMaxSpeed = [1.0, 1.0]<br>    clearExisting = False<br>motionProxy.setFootStepsWithSpeed(legName, footSteps, fractionMaxSpeed, clearExisting)</p><h4 id="ALMotionProxy-waitUntilMoveIsFinished"><a href="#ALMotionProxy-waitUntilMoveIsFinished" class="headerlink" title="ALMotionProxy :: waitUntilMoveIsFinished"></a>ALMotionProxy :: waitUntilMoveIsFinished</h4><blockquote><p>void ALMotionProxy :: waitUntilMoveIsFinished （）</p></blockquote><p>等待MoveTask结束：此方法可用于阻止脚本/代码执行，直到完成移动任务。</p><h3 id="ALMemory"><a href="#ALMemory" class="headerlink" title="ALMemory"></a>ALMemory</h3><h4 id="ALMemoryProxy-getData"><a href="#ALMemoryProxy-getData" class="headerlink" title="ALMemoryProxy :: getData"></a>ALMemoryProxy :: getData</h4><p><img src="https://img-blog.csdnimg.cn/20191104230635688.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20191104230703245.png" alt="在这里插入图片描述"></p><h4 id="ALMemoryProxy-getDataList"><a href="#ALMemoryProxy-getDataList" class="headerlink" title="ALMemoryProxy :: getDataList"></a>ALMemoryProxy :: getDataList</h4><p><img src="https://img-blog.csdnimg.cn/20191104231023623.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20191104231006634.png" alt="在这里插入图片描述"></p><h4 id="ALMemoryProxy-declareEvent"><a href="#ALMemoryProxy-declareEvent" class="headerlink" title="ALMemoryProxy :: declareEvent"></a>ALMemoryProxy :: declareEvent</h4><p><img src="https://img-blog.csdnimg.cn/20191104231400569.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191104231456979.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20191104231536830.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="ALMemoryProxy-insertData"><a href="#ALMemoryProxy-insertData" class="headerlink" title="ALMemoryProxy :: insertData"></a>ALMemoryProxy :: insertData</h4><p><img src="https://img-blog.csdnimg.cn/20191104231640314.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191104231711189.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="ALTracker"><a href="#ALTracker" class="headerlink" title="ALTracker"></a>ALTracker</h3><h4 id="ALTrackerProxy-getActiveTarget"><a href="#ALTrackerProxy-getActiveTarget" class="headerlink" title="ALTrackerProxy :: getActiveTarget"></a>ALTrackerProxy :: getActiveTarget</h4><p><img src="https://img-blog.csdnimg.cn/20191105092719864.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20191105092748702.png" alt="在这里插入图片描述"></p><h4 id="ALTrackerProxy-getMaximumDistanceDetection"><a href="#ALTrackerProxy-getMaximumDistanceDetection" class="headerlink" title="ALTrackerProxy :: getMaximumDistanceDetection"></a>ALTrackerProxy :: getMaximumDistanceDetection</h4><p><img src="https://img-blog.csdnimg.cn/20191105092902982.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20191105092842717.png" alt="在这里插入图片描述"></p><h4 id="ALTrackerProxy-getMode"><a href="#ALTrackerProxy-getMode" class="headerlink" title="ALTrackerProxy::getMode"></a>ALTrackerProxy::getMode</h4><p><img src="https://img-blog.csdnimg.cn/20191105092957504.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20191105093025988.png" alt="在这里插入图片描述"></p><h4 id="ALTrackerProxy-getRelativePosition"><a href="#ALTrackerProxy-getRelativePosition" class="headerlink" title="ALTrackerProxy :: getRelativePosition"></a>ALTrackerProxy :: getRelativePosition</h4><p><img src="https://img-blog.csdnimg.cn/20191105093151996.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191105093127809.png" alt="在这里插入图片描述"></p><h4 id="ALTrackerProxy-isNewTargetDetected"><a href="#ALTrackerProxy-isNewTargetDetected" class="headerlink" title="ALTrackerProxy :: isNewTargetDetected"></a>ALTrackerProxy :: isNewTargetDetected</h4><p><img src="https://img-blog.csdnimg.cn/20191105093349871.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20191105093409307.png" alt="在这里插入图片描述"></p><h4 id="ALTrackerProxy-isSearchEnabled"><a href="#ALTrackerProxy-isSearchEnabled" class="headerlink" title="ALTrackerProxy::isSearchEnabled"></a>ALTrackerProxy::isSearchEnabled</h4><p><img src="https://img-blog.csdnimg.cn/20191105093451746.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/201911050935585.png" alt="在这里插入图片描述"></p><h4 id="ALTrackerProxy-getTargetPosition"><a href="#ALTrackerProxy-getTargetPosition" class="headerlink" title="ALTrackerProxy :: getTargetPosition"></a>ALTrackerProxy :: getTargetPosition</h4><p><img src="https://img-blog.csdnimg.cn/2019110510070682.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20191105100749883.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20191105100848642.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="ALTrackerProxy-isTargetLost"><a href="#ALTrackerProxy-isTargetLost" class="headerlink" title="ALTrackerProxy::isTargetLost"></a>ALTrackerProxy::isTargetLost</h4><p><img src="https://img-blog.csdnimg.cn/20191105093510921.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20191105093527953.png" alt="在这里插入图片描述"></p><h4 id="ALTrackerProxy-setTimeOut"><a href="#ALTrackerProxy-setTimeOut" class="headerlink" title="ALTrackerProxy::setTimeOut"></a>ALTrackerProxy::setTimeOut</h4><p><img src="https://img-blog.csdnimg.cn/20191105093709541.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20191105093731977.png" alt="在这里插入图片描述"></p><h2 id="Events"><a href="#Events" class="headerlink" title="Events"></a>Events</h2><h3 id="ALLandMarkDetection"><a href="#ALLandMarkDetection" class="headerlink" title="ALLandMarkDetection"></a>ALLandMarkDetection</h3><p><img src="https://img-blog.csdnimg.cn/2019110422353448.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191104223604810.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191104223654926.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191104223747163.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20191104223811743.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>结果变量的组织方式</p><p>①如果未检测到Naomarks，则变量为空。更确切地说，它是一个零元素的数组（即在python中打印为[]）</p><p>②如果检测到N个Naomarks，则变量结构由两个字段组成：<br>[[TimeStampField] [Mark_info_0，Mark_info_1 ,. 。。，Mark_info_N-1]]：<br>A：TimeStampField = [TimeStamp_seconds，Timestamp_microseconds]。该字段是用于执行检测的图像的时间戳。<br>B：Mark_info = [ShapeInfo，ExtraInfo]。对于每个检测到的标记，我们有一个Mark_info字段。<br>B\1 ShapeInfo = [1，alpha，beta，sizeX，sizeY，heading]。alpha和beta表示Naomark在摄像机角度方面的位置 - sizeX和sizeY是摄像机角度的标记大小 - 航向角描述了Naomark关于机器人头部的垂直轴方向。<br>B\2 ExtraInfo = [MarkID]。标记ID是写在Naomark上的编号，与其图案相对应。</p><h3 id="ALRedBallDetection"><a href="#ALRedBallDetection" class="headerlink" title="ALRedBallDetection"></a>ALRedBallDetection</h3><p><img src="https://img-blog.csdnimg.cn/20191104224208178.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191104224225425.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191104224349616.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20191104224438706.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20191104224506246.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>ALRedBallDetection基于摄像机给出的图像中红色像素的检测。这些像素根据它们与YUV颜色空间中的红色值的距离进行滤波，使用计算的阈值，即使在光照条件变化的情况下也可以进行检测。然后，从所有检测到的红色像素组中，仅保留定义圆形形状的红色像素。<br>当在当前图像上找到一组像素时，将更新ALMemory键redBallDetected。</p><p>结果变量的组织形式</p><p>TimeStamp：此字段是用于执行检测的图像的时间戳</p><p>centerX和centerY是球的中心角度坐标（弧度）<br>角度的原点是图像的中间。centerX 对应于沿Z轴的直接（逆时针）旋转，centerY对应于沿Y轴的直接旋转，如下图所示：</p><p>sizeX和sizeY是球在角度（弧度）的球“水平和垂直半径</p><h2 id="相关名词"><a href="#相关名词" class="headerlink" title="相关名词"></a>相关名词</h2><h3 id="参考系"><a href="#参考系" class="headerlink" title="参考系"></a>参考系</h3><p><img src="https://img-blog.csdnimg.cn/20191105101227726.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>FRAME_TORSO：这是附加到机器人的躯干参考上的，因此机器人在走路时随其移动，在他倾斜时改变方向。当您执行非常局部的任务时（在躯干框架的方向上有意义），此空间很有用。</p><p>FRAME_ROBOT：这是围绕垂直Z轴投影的两只脚位置的平均值。该空间很有用，因为x轴始终向前，因此提供了一个以自我为中心的自然参考。</p><p>FRAME_WORLD：这是一个固定的原点，永远不会改变。当机器人行走时，它会被留下，并且在机器人转动之后z旋转会有所不同。此空间对于需要外部绝对参考框架的计算很有用。</p><p>执行任务时，空间是在任务开始时确定的，并且在其余的插值过程中始终保持不变。也就是说，插值一旦定义就不会随着腿的移动或躯干方向的变化而随着参考值的变化而变化。</p><p><img src="https://img-blog.csdnimg.cn/20191105102313509.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="刚度"><a href="#刚度" class="headerlink" title="刚度"></a>刚度</h3><p><img src="https://img-blog.csdnimg.cn/20191105101006707.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="阻塞方法与非阻塞方法"><a href="#阻塞方法与非阻塞方法" class="headerlink" title="阻塞方法与非阻塞方法"></a>阻塞方法与非阻塞方法</h3><p><img src="https://img-blog.csdnimg.cn/20191105101503845.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20191105101516358.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="Position6D"><a href="#Position6D" class="headerlink" title="Position6D"></a>Position6D</h3><p>Position6D是一个6维向量，由3个平移（以米为单位）和3个旋转（以弧度为单位）组成。</p><h2 id="基于NAO机器人目标识别与定位算法"><a href="#基于NAO机器人目标识别与定位算法" class="headerlink" title="基于NAO机器人目标识别与定位算法"></a>基于NAO机器人目标识别与定位算法</h2><p><img src="https://img-blog.csdnimg.cn/20191104232531612.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20191104232638578.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20191104232715587.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20191104232732597.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20191104232801589.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20191104232828780.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20191104232858306.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/2019110423292276.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20191104232949800.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20191104233040502.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20191104233123262.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20191104233146811.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>选自：柏雪峰,杨斌.基于NAO机器人目标识别与定位算法[J].成都信息工程学院学报,2014,29(06):625-629.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;NAO机器人的小记&quot;&gt;&lt;a href=&quot;#NAO机器人的小记&quot; class=&quot;headerlink&quot; title=&quot;NAO机器人的小记&quot;&gt;&lt;/a&gt;NAO机器人的小记&lt;/h1&gt;&lt;p&gt;@[toc]&lt;/p&gt;
&lt;h2 id=&quot;joint&quot;&gt;&lt;a href=&quot;#joint&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>欧拉角</title>
    <link href="http://yoursite.com/2019/11/10/%E6%AC%A7%E6%8B%89%E8%A7%92-1/"/>
    <id>http://yoursite.com/2019/11/10/欧拉角-1/</id>
    <published>2019-11-10T13:08:59.000Z</published>
    <updated>2019-11-11T10:39:10.964Z</updated>
    
    <content type="html"><![CDATA[<h1 id="欧拉角"><a href="#欧拉角" class="headerlink" title="欧拉角"></a>欧拉角</h1><p>由于在NAO机器人编程中第一次接触到pitch、yaw以及roll所以写此blog</p><p><img src="https://img-blog.csdnimg.cn/20191107194832782.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>设定xyz-轴为参考系的参考轴。称xy-平面与XY-平面的相交为交点线，用英文字母（N）代表<br>  $\alpha$ 是x-轴与交点线的夹角，<br>$\beta$ 是z-轴与Z-轴的夹角，<br>$\gamma$是交点线与X-轴的夹角。</p><p>$\alpha$ 和$\gamma$值分别从0至$2\pi$  弧度。<br>$\beta$ 值从0至$2\pi$ 弧度。</p><p><img src="https://img-blog.csdnimg.cn/20191107195257905.gif" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20191107201008744.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>下面三张动图形象的表示了欧拉角的旋转方式</p><p>pitch是围绕X轴旋转，也叫做俯仰角<br><img src="https://img-blog.csdnimg.cn/20191107201026709.gif" alt="在这里插入图片描述"></p><p>yaw是围绕Y轴旋转，也叫偏航角<br><img src="https://img-blog.csdnimg.cn/20191107201037486.gif" alt="在这里插入图片描述"></p><p>roll是围绕Z轴旋转，也叫翻滚角</p><p><img src="https://img-blog.csdnimg.cn/20191107201046698.gif" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;欧拉角&quot;&gt;&lt;a href=&quot;#欧拉角&quot; class=&quot;headerlink&quot; title=&quot;欧拉角&quot;&gt;&lt;/a&gt;欧拉角&lt;/h1&gt;&lt;p&gt;由于在NAO机器人编程中第一次接触到pitch、yaw以及roll所以写此blog&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https:/
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>利用单目视觉做NAO机器人摄像头坐标转换</title>
    <link href="http://yoursite.com/2019/11/10/%E5%88%A9%E7%94%A8%E5%8D%95%E7%9B%AE%E8%A7%86%E8%A7%89%E5%81%9ANAO%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%91%84%E5%83%8F%E5%A4%B4%E5%9D%90%E6%A0%87%E8%BD%AC%E6%8D%A2-1/"/>
    <id>http://yoursite.com/2019/11/10/利用单目视觉做NAO机器人摄像头坐标转换-1/</id>
    <published>2019-11-10T13:08:40.000Z</published>
    <updated>2019-11-11T10:39:45.911Z</updated>
    
    <content type="html"><![CDATA[<h1 id="利用单目视觉做NAO机器人摄像头坐标转换"><a href="#利用单目视觉做NAO机器人摄像头坐标转换" class="headerlink" title="利用单目视觉做NAO机器人摄像头坐标转换"></a>利用单目视觉做NAO机器人摄像头坐标转换</h1><p>趁着比赛将近，总结一下对于NAO机器人摄像头坐标转换问题的理解。</p><h2 id="一-问题的来由："><a href="#一-问题的来由：" class="headerlink" title="一.问题的来由："></a>一.问题的来由：</h2><p>为了让NAO机器人识别某个物体，然后走到物体面前一段距离的位置停止，需要知道NAO和物体的距离和角度。通过查找aldebaran documentation可知用函数getTargetPositon（）可以得到某些特定的物体的坐标。</p><blockquote><p><a href="http://doc.aldebaran.com/2-1/naoqi/trackers/altracker.html#tracking-targets" target="_blank" rel="noopener">http://doc.aldebaran.com/2-1/naoqi/trackers/altracker.html#tracking-targets</a></p></blockquote><p><img src="https://img-blog.csdnimg.cn/20191029082849867.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>但是对于一般的物体而言这个并没有什么卵用。。</p><p>二.解决办法  </p><p> 用简单的单目测距原理和相似三角形原理作一个坐标变换：</p><p>设以摄像头为坐标原点的坐标系为A（原点：摄像头镜头，X轴正前方，Y轴左前方）</p><p>   以摄像头焦平面为坐标原点的坐标系为B（原点：2D图像中心（640x480的图就是（320，240）啦），注意这个X轴和Y轴方向如图所示：</p><p><img src="https://img-blog.csdnimg.cn/20191029082829157.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>图中的角60.97°和47.64°分别是NAO机器人的水平张角和垂直张角。</p><p>由三角函数变换：alpha=((320-x)/640)<em>60.97</em>pi/180</p><p>   beta=((y-240)/480)<em>47.64</em>pi/180</p><p>由NAO提供的API，getAngles（）参数设置成HeadYaw和HeadPitch获得头部姿态，假设是Rotation1和Rotation2，则可以得到校正后的alpha’和beta’:</p><p>alpha’=alpha+Rotation1</p><p>beta’=beta+Rotation2</p><p>然后通过AngleInterpolation()将头部转到目标物中间，理想状态下应该物体重心点正好在图像的中心（320,240)</p><h2 id="三-接着就可以测量距离啦"><a href="#三-接着就可以测量距离啦" class="headerlink" title="三.接着就可以测量距离啦"></a>三.接着就可以测量距离啦</h2><p>通过以上变换是为了让机器人的摄像头正好对准物体中心，这样构造出来的计算距离的模型会是一个平面三角形，简化了计算。</p><p>V5的NAO身高H总共是459.59mm，假设物体长度L，则有：</p><p>tan(phi+theta)=(H-L/2)/S</p><p><img src="https://img-blog.csdnimg.cn/20191029082748403.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>   其中theta是下摄像头和水平方向夹角，为39.7°  </p><p>   phi可以由函数getangle（）带入参数”HeadPitch”得到</p><p>   将已知条件代入即可得到距离S</p><p>以上是一种简单的获得物体坐标的方式，其优点是写代码简单快捷，缺点是没有摄像头标定精度较低，且应用范围较小。可作为替代的还有双目视觉和采用深度摄像头获得三维坐标的方案，等有空再更新。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;利用单目视觉做NAO机器人摄像头坐标转换&quot;&gt;&lt;a href=&quot;#利用单目视觉做NAO机器人摄像头坐标转换&quot; class=&quot;headerlink&quot; title=&quot;利用单目视觉做NAO机器人摄像头坐标转换&quot;&gt;&lt;/a&gt;利用单目视觉做NAO机器人摄像头坐标转换&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>python实现ID3 决策树</title>
    <link href="http://yoursite.com/2019/11/10/python%E5%AE%9E%E7%8E%B0ID3-%E5%86%B3%E7%AD%96%E6%A0%91/"/>
    <id>http://yoursite.com/2019/11/10/python实现ID3-决策树/</id>
    <published>2019-11-10T13:08:26.000Z</published>
    <updated>2019-11-11T10:40:10.334Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python实现ID3-决策树"><a href="#python实现ID3-决策树" class="headerlink" title="python实现ID3 决策树"></a>python实现ID3 决策树</h1><h2 id="素材"><a href="#素材" class="headerlink" title="素材"></a>素材</h2><h3 id="AllElectronics-csv"><a href="#AllElectronics-csv" class="headerlink" title="AllElectronics.csv"></a>AllElectronics.csv</h3><p><img src="https://img-blog.csdnimg.cn/20191024124557801.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> tree</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing</span><br><span class="line"><span class="keyword">from</span> sklearn.feature_extraction <span class="keyword">import</span> DictVectorizer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">allElectronicsData = open(<span class="string">r'AllElectronics.csv'</span>, <span class="string">'r'</span>)  <span class="comment">#</span></span><br><span class="line">reader = csv.reader(allElectronicsData)  <span class="comment"># 迭代器</span></span><br><span class="line">headers = next(reader)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"reader:"</span>+str(reader))</span><br><span class="line">print(<span class="string">"headers:"</span>+str(headers))</span><br><span class="line"></span><br><span class="line">featureList = []</span><br><span class="line">labelList = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> reader:</span><br><span class="line">    print(row)</span><br><span class="line">    labelList.append((row[len(row) - <span class="number">1</span>]))  <span class="comment"># 把预测项作为labelList的元素</span></span><br><span class="line">    rowDict = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(row) - <span class="number">1</span>):  <span class="comment"># 从1开始是因为要防止读取RID</span></span><br><span class="line">        rowDict[headers[i]] = row[i]</span><br><span class="line">    featureList.append(rowDict)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"labelList:"</span>+str(labelList))</span><br><span class="line">print(<span class="string">"featureList:"</span>+str(featureList))  <span class="comment"># 列表里面含有字典</span></span><br><span class="line"></span><br><span class="line">vec = DictVectorizer()  <span class="comment"># 符号化将字典转换成0、1字符</span></span><br><span class="line">dummyX = vec.fit_transform(featureList).toarray()  <span class="comment"># 将featureList转化成0、1字符</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'dummyX:'</span>+str(dummyX))</span><br><span class="line">print(<span class="string">"feature_names:"</span>+str(vec.get_feature_names()))  <span class="comment"># 打印每一个特征值用键值对合并表示</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"labelList:"</span>+str(labelList))</span><br><span class="line"></span><br><span class="line">lb = preprocessing.LabelBinarizer()  <span class="comment"># 二值化</span></span><br><span class="line">dummyY = lb.fit_transform(labelList)  <span class="comment"># 将labelList中相反的值转化成0，1字符</span></span><br><span class="line">print(<span class="string">"dummyY:"</span>+str(dummyY))</span><br><span class="line"></span><br><span class="line">clf = tree.DecisionTreeClassifier(criterion=<span class="string">'entropy'</span>)  <span class="comment"># 按信息熵来使用决策树ID3算法</span></span><br><span class="line">clf = clf.fit(dummyX, dummyY)  <span class="comment"># 按dummyX，dummyY拟合</span></span><br><span class="line">print(<span class="string">"clf:"</span>+str(dummyY))</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"allElectronicInformationGainOri.dot"</span>, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f = tree.export_graphviz(clf, feature_names=vec.get_feature_names(), out_file=f)</span><br><span class="line">    <span class="comment"># 把clf写入并生成allElectronicInformationGainOri.dot文件</span></span><br><span class="line"></span><br><span class="line">oneRowX = dummyX[<span class="number">0</span>, :]  <span class="comment"># 获取训练集的第一行数据</span></span><br><span class="line">print(<span class="string">"oneRowX:"</span>, str(oneRowX))</span><br><span class="line"></span><br><span class="line">newRowX = oneRowX</span><br><span class="line">newRowX[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">newRowX[<span class="number">2</span>] = <span class="number">0</span></span><br><span class="line"><span class="comment"># 修改newRowX的并作为测试集</span></span><br><span class="line">print(<span class="string">"newRowX:"</span> + str(newRowX))</span><br><span class="line"></span><br><span class="line">predictedY = clf.predict([newRowX])  <span class="comment"># 测试</span></span><br><span class="line">print(<span class="string">"predictedY:"</span> + str(predictedY))</span><br></pre></td></tr></table></figure><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p><img src="https://img-blog.csdnimg.cn/20191024124809637.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python实现ID3-决策树&quot;&gt;&lt;a href=&quot;#python实现ID3-决策树&quot; class=&quot;headerlink&quot; title=&quot;python实现ID3 决策树&quot;&gt;&lt;/a&gt;python实现ID3 决策树&lt;/h1&gt;&lt;h2 id=&quot;素材&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>数字图像处理关于傅里叶变换的小记</title>
    <link href="http://yoursite.com/2019/11/10/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%85%B3%E4%BA%8E%E5%82%85%E9%87%8C%E5%8F%B6%E5%8F%98%E6%8D%A2%E7%9A%84%E5%B0%8F%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/11/10/数字图像处理关于傅里叶变换的小记/</id>
    <published>2019-11-10T13:08:07.000Z</published>
    <updated>2019-11-11T10:40:34.475Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数字图像处理关于傅里叶变换的小记"><a href="#数字图像处理关于傅里叶变换的小记" class="headerlink" title="数字图像处理关于傅里叶变换的小记"></a>数字图像处理关于傅里叶变换的小记</h1><p>@[toc]</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>傅里叶级数得名于法国数学家约瑟夫·傅里叶(1768年–1830年)，他提出==任何周期函数都可以展开为三角级数==。此前数学家如拉格朗日等已经找到了一些非周期函数的三角级数展开，而认定一个函数有三角级数展开之后，通过积分方法计算其系数的公式，欧拉、达朗贝尔和克莱罗早已发现，傅里叶的工作得到了丹尼尔·伯努利的赞助。傅里叶介入三角级数用来解热传导方程，其最初论文在1807年经拉格朗日、拉普拉斯和勒让德评审后被拒绝出版，他的现在被称为傅里叶逆转定理的理论后来发表于1820年的《热的解析理论》中。将周期函数分解为简单振荡函数的总和的最早想法，可以追溯至公元前3世纪古代天文学家的均轮和本轮学说。</p><p>傅里叶级数在数论、组合数学、信号处理、概率论、统计学、密码学、声学、光学等领域都有着广泛的应用。</p><p>傅里叶在这个领域的贡献是，<font size="5">他指出任何周期函数都可以表示为不同频率的正弦和/或余弦函数之后的形式，每一个正弦项和/或余弦都乘以不同的系数，无论函数多么复杂，只要它是周期性的，并且满足一些适度的数学条件，都可以用这样的和来表示。<font color="#ff00">即任何周期函数，都可以看作是不同振幅，不同相位正弦波的叠加。</font>甚至非周期函数（但该曲线的面积是有限的情况下）也可用正弦和/或余弦乘以加权函数的积分来表示。</font></p><p>傅里叶变换原来就是一种变换而已，只是这种变换是从时间转换为频率的变化</p><p><img src="https://img-blog.csdnimg.cn/20191018221827479.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>参考链接 <a href="https://zh.wikipedia.org/wiki/%E5%82%85%E9%87%8C%E5%8F%B6%E7%BA%A7%E6%95%B0" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/%E5%82%85%E9%87%8C%E5%8F%B6%E7%BA%A7%E6%95%B0</a><br><br><br><a href="https://www.cnblogs.com/h2zZhou/articles/8405717.html" target="_blank" rel="noopener">https://www.cnblogs.com/h2zZhou/articles/8405717.html</a></p></blockquote><h2 id="复数"><a href="#复数" class="headerlink" title="复数"></a>复数</h2><p><img src="https://img-blog.csdnimg.cn/20191015093851950.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><font size="7"><br>$|Z|=\sqrt{x^2+y^2}$<br>Z =｜Z｜(cosθ+jsinθ)<br><br><br>e^jθ^=cosθ+jsinθ<br></font><br>则可得：θ</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line">print(math.acos(<span class="number">1</span>/math.sqrt(<span class="number">5</span>)))</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.1071487177940904</span><br></pre></td></tr></table></figure><h2 id="傅里叶级数"><a href="#傅里叶级数" class="headerlink" title="傅里叶级数"></a>傅里叶级数</h2><h3 id="频域与时域"><a href="#频域与时域" class="headerlink" title="频域与时域"></a>频域与时域</h3><p><img src="https://img-blog.csdnimg.cn/20191015120203573.gif" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20191015120328840.gif" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20191015120352803.gif" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20191018202901580.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>[video(video-W1GLGCWF-1571408450268)(type-tencent)(url-<a href="https://v.qq.com/txp/iframe/player.html?vid=r0543lhhz4a)(title-傅立叶变换，傅里叶级数和频谱)]" target="_blank" rel="noopener">https://v.qq.com/txp/iframe/player.html?vid=r0543lhhz4a)(title-傅立叶变换，傅里叶级数和频谱)]</a></p><h3 id="复数形式的傅里叶级数的证明"><a href="#复数形式的傅里叶级数的证明" class="headerlink" title="复数形式的傅里叶级数的证明"></a>复数形式的傅里叶级数的证明</h3><p><img src="https://img-blog.csdnimg.cn/20191015093524324.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191015093543817.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191015093555800.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191015100707500.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191015100722136.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="傅立叶变换与傅立叶逆变换"><a href="#傅立叶变换与傅立叶逆变换" class="headerlink" title="傅立叶变换与傅立叶逆变换"></a>傅立叶变换与傅立叶逆变换</h2><h3 id="一维离散傅立叶变换"><a href="#一维离散傅立叶变换" class="headerlink" title="一维离散傅立叶变换"></a>一维离散傅立叶变换</h3><p><img src="https://img-blog.csdnimg.cn/20191019154036195.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 单变量的离散傅立叶变换 P138</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">DFT</span><span class="params">(x)</span>:</span></span><br><span class="line">    M = np.size(x)</span><br><span class="line">    new_x = np.zeros((M, ), dtype=np.complex)</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">0</span>, M):</span><br><span class="line">        <span class="keyword">for</span> m <span class="keyword">in</span> range(<span class="number">0</span>, M):</span><br><span class="line">            new_x[n] += x[m]*np.exp(<span class="number">-2j</span>*np.pi*m*n/M)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> new_x</span><br><span class="line"></span><br><span class="line">x = np.random.rand(<span class="number">1024</span>, )</span><br><span class="line">x1 = DFT(x)</span><br><span class="line">x2 = np.fft.fft(x)</span><br><span class="line">print(<span class="string">"x1"</span>, x1)</span><br><span class="line">print(<span class="string">"x2"</span>, x2)</span><br><span class="line">print(<span class="string">'Is DFT close to fft?'</span>, np.allclose(x1, x2, <span class="number">1e-12</span>))</span><br></pre></td></tr></table></figure><h3 id="二维离散傅立叶变换"><a href="#二维离散傅立叶变换" class="headerlink" title="二维离散傅立叶变换"></a>二维离散傅立叶变换</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 二维离散傅立叶变换</span></span><br><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">FFT_v1</span><span class="params">(Img, Wr)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> Img.shape[<span class="number">0</span>] == <span class="number">2</span>:</span><br><span class="line">        pic = numpy.zeros([<span class="number">2</span>], dtype=complex)</span><br><span class="line">        pic = pic * (<span class="number">1</span> + <span class="number">0j</span>)</span><br><span class="line">        pic[<span class="number">0</span>] = Img[<span class="number">0</span>] + Img[<span class="number">1</span>] * Wr[<span class="number">0</span>]</span><br><span class="line">        pic[<span class="number">1</span>] = Img[<span class="number">0</span>] - Img[<span class="number">1</span>] * Wr[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">return</span> pic</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        pic = numpy.empty([Img.shape[<span class="number">0</span>]], dtype=complex)</span><br><span class="line">        pic[<span class="number">0</span>:Img.shape[<span class="number">0</span>] // <span class="number">2</span>] = FFT_v1(Img[::<span class="number">2</span>], Wr[::<span class="number">2</span>]) + Wr * FFT_v1(Img[<span class="number">1</span>::<span class="number">2</span>], Wr[::<span class="number">2</span>])</span><br><span class="line">        pic[Img.shape[<span class="number">0</span>] // <span class="number">2</span>:Img.shape[<span class="number">0</span>]] = FFT_v1(Img[::<span class="number">2</span>], Wr[::<span class="number">2</span>]) - Wr * FFT_v1(Img[<span class="number">1</span>::<span class="number">2</span>], Wr[::<span class="number">2</span>])</span><br><span class="line">        <span class="keyword">return</span> pic</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">FFT_1d</span><span class="params">(Img)</span>:</span></span><br><span class="line">    Wr = numpy.ones([Img.shape[<span class="number">0</span>] // <span class="number">2</span>]) * [</span><br><span class="line">        numpy.cos(<span class="number">2</span> * numpy.pi * i / Img.shape[<span class="number">0</span>]) - <span class="number">1j</span> * numpy.sin(<span class="number">2</span> * numpy.pi * i / Img.shape[<span class="number">0</span>]) <span class="keyword">for</span> i <span class="keyword">in</span></span><br><span class="line">        numpy.arange(Img.shape[<span class="number">0</span>] / <span class="number">2</span>)]</span><br><span class="line">    <span class="keyword">return</span> FFT_v1(Img, Wr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">FFT_2d</span><span class="params">(Img)</span>:</span></span><br><span class="line">    pic = numpy.zeros([Img.shape[<span class="number">0</span>], Img.shape[<span class="number">1</span>]], dtype=complex)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> numpy.arange(Img.shape[<span class="number">0</span>]):</span><br><span class="line">        pic[:, i] = FFT_1d(Img[:, i])</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> numpy.arange(Img.shape[<span class="number">1</span>]):</span><br><span class="line">        pic[i, :] = FFT_1d(pic[i, :])</span><br><span class="line">    <span class="keyword">return</span> pic</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    array = numpy.zeros([<span class="number">512</span>], dtype=complex)</span><br><span class="line"></span><br><span class="line">    img = cv.imread(<span class="string">'p1.jpg'</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"numpy.fft.fft2()函数计算结果："</span>)</span><br><span class="line">    t_s1 = time.time()</span><br><span class="line">    a=numpy.fft.fft2(img)</span><br><span class="line">    print(a)</span><br><span class="line">    t_e1 = time.time()</span><br><span class="line">    print(<span class="string">"计算时间："</span> + str(t_e1 - t_s1))</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"FFT_2d()函数的计算结果："</span>)</span><br><span class="line">    t_s2 = time.time()</span><br><span class="line">    b=FFT_2d(img)</span><br><span class="line">    print(b)</span><br><span class="line">    t_e2 = time.time()</span><br><span class="line">    print(<span class="string">"计算时间："</span> + str(t_e2 - t_s2))</span><br><span class="line">    print(a == b)</span><br><span class="line">    print(numpy.allclose(a, b), <span class="number">1e-12</span>)</span><br></pre></td></tr></table></figure><h4 id="时间消耗"><a href="#时间消耗" class="headerlink" title="时间消耗"></a>时间消耗</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> pyplot</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">DFT</span><span class="params">(x)</span>:</span></span><br><span class="line">    N = numpy.size(x)</span><br><span class="line">    X = numpy.zeros((N,),dtype=numpy.complex128)</span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> range(<span class="number">0</span>,N):</span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">0</span>,N):</span><br><span class="line">            X[m] += x[n]*numpy.exp(-numpy.pi*<span class="number">2j</span>*m*n/N)</span><br><span class="line">    <span class="keyword">return</span> X</span><br><span class="line"></span><br><span class="line">dft_time = []</span><br><span class="line">fft_time = []</span><br><span class="line">n_series = []</span><br><span class="line"><span class="keyword">for</span> N <span class="keyword">in</span> numpy.power(<span class="number">2</span>,range(<span class="number">1</span>,<span class="number">11</span>)):</span><br><span class="line">    print(N)</span><br><span class="line">    x = numpy.ones((N,))</span><br><span class="line"></span><br><span class="line">    t0 = time.time()</span><br><span class="line">    <span class="keyword">for</span> pp <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">2</span>):</span><br><span class="line">        X = DFT(x)</span><br><span class="line">    print(X)</span><br><span class="line">    t1 = (time.time()-t0)/<span class="number">2.0</span></span><br><span class="line"></span><br><span class="line">    t0 = time.time()</span><br><span class="line">    <span class="keyword">for</span> pp <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">2</span>):</span><br><span class="line">        Y = numpy.fft.fft(x)</span><br><span class="line">    t2 = (time.time()-t0)/<span class="number">2.0</span></span><br><span class="line"></span><br><span class="line">    n_series.append(N)</span><br><span class="line">    dft_time.append(t1)</span><br><span class="line">    fft_time.append(t2)</span><br><span class="line"></span><br><span class="line">line_dft, = pyplot.plot(n_series, dft_time, label=<span class="string">'DFT'</span>)</span><br><span class="line">line_fft, = pyplot.plot(n_series, fft_time,<span class="string">'r'</span>,label=<span class="string">'FFT'</span>)</span><br><span class="line">pyplot.legend(handles=[line_dft, line_fft])</span><br><span class="line">pyplot.ylabel(<span class="string">'times(second)'</span>)</span><br><span class="line">pyplot.xlabel(<span class="string">'N'</span>)</span><br><span class="line"></span><br><span class="line">pyplot.show()</span><br><span class="line">print(dft_time)</span><br><span class="line">print(fft_time)</span><br><span class="line">print(numpy.allclose(X, Y), <span class="number">1e-12</span>)</span><br><span class="line">print(X == Y)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20191019113645892.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191015215801307.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">img = cv.imread(<span class="string">'t1.png'</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">131</span>)</span><br><span class="line">plt.title(<span class="string">"original"</span>)</span><br><span class="line">plt.axis(<span class="string">'off'</span>)</span><br><span class="line">plt.imshow(img, cmap=<span class="string">'gray'</span>)</span><br><span class="line"></span><br><span class="line">f = np.fft.fft2(img)  <span class="comment"># 快速傅里叶变换算法得到频率分布</span></span><br><span class="line">fshift = np.fft.fftshift(f)  <span class="comment"># 默认结果中心点位置是在左上角,调用fftshift()函数转移到中间位置</span></span><br><span class="line">fimg = np.log(np.abs(fshift))  <span class="comment"># fft结果是复数, 其绝对值结果是振幅，频谱对数变换,取对数放大波动</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#展示结果</span></span><br><span class="line">plt.subplot(<span class="number">132</span>)</span><br><span class="line">plt.title(<span class="string">'Fourier Fourier'</span>)</span><br><span class="line">plt.axis(<span class="string">'off'</span>)</span><br><span class="line">plt.imshow(fimg, <span class="string">'gray'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 傅立叶逆变换</span></span><br><span class="line">plt.subplot(<span class="number">133</span>)</span><br><span class="line">ifshift = np.fft.ifftshift(fshift)</span><br><span class="line">iimg = np.fft.ifft2(ifshift)</span><br><span class="line">iimg = np.abs(iimg)</span><br><span class="line">plt.axis(<span class="string">'off'</span>)</span><br><span class="line">plt.title(<span class="string">'Inverse Fourier Image'</span>)</span><br><span class="line">plt.imshow(iimg, <span class="string">'gray'</span>)</span><br><span class="line"></span><br><span class="line">plt.savefig(<span class="string">'test0.png'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20191018220850177.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>左边为原始图像，中间为频率分布图谱，其中越靠近中心位置频率越低，越亮（灰度值越高）的位置代表该频率的信号振幅越大，右边为傅立叶逆变换得到的图像。</p><blockquote><p>#计算一维傅里叶变换<br>numpy.fft.fft(a, n=None, axis=-1, norm=None)</p></blockquote><p>#计算二维的傅里叶变换<br>numpy.fft.fft2(a, n=None, axis=-1, norm=None)</p><p>#计算n维的傅里叶变换<br>numpy.fft.fftn()</p><p>#计算n维实数的傅里叶变换<br>numpy.fft.rfftn()</p><p>#返回傅里叶变换的采样频率<br>numpy.fft.fftfreq()</p><p>#将FFT输出中的直流分量移动到频谱中央<br>numpy.fft.shift()</p><p>#实现图像逆傅里叶变换，返回一个复数数组<br>numpy.fft.ifft2(a, n=None, axis=-1, norm=None)</p><p>#fftshit()函数的逆函数，它将频谱图像的中心低频部分移动至左上角<br>numpy.fft.fftshift()</p><p>#将复数转换为0至255范围<br>iimg = numpy.abs(逆傅里叶变换结果)</p><h2 id="冲激"><a href="#冲激" class="headerlink" title="冲激"></a>冲激</h2><p><img src="https://img-blog.csdnimg.cn/20191015215615133.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191015102503527.gif" alt="在这里插入图片描述"></p><p>以一个面积为1的三角形为例，底边不断收缩，当底边a-&gt;0时，高-&gt;∞</p><p><img src="https://img-blog.csdnimg.cn/20191016002345386.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191016002422598.png" alt="在这里插入图片描述"></p><h2 id="卷积"><a href="#卷积" class="headerlink" title="卷积"></a>卷积</h2><p><img src="https://img-blog.csdnimg.cn/20191019150248156.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2019101915033868.gif" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2019101523264986.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191015232958264.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20191015233132625.gif" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20191015233709223.gif" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20191015232629708.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="卷积的求法（利用傅立叶变换）"><a href="#卷积的求法（利用傅立叶变换）" class="headerlink" title="卷积的求法（利用傅立叶变换）"></a>卷积的求法（利用傅立叶变换）</h3><p>卷积与傅里叶变换有着密切的关系。例如两函数的傅里叶变换的乘积等于它们卷积后的傅里叶变换，利用此一性质，能简化傅里叶分析中的许多问题。<br><img src="https://img-blog.csdnimg.cn/20191019150658862.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="Nyquist采样定理"><a href="#Nyquist采样定理" class="headerlink" title="Nyquist采样定理"></a>Nyquist采样定理</h2><p>象一个白色的圆盘，有一条沿着半径的黑线，圆盘以角速度[公式]旋转。<br>你以一定的周期拍照，就是采样。<br>你拍照的频率恰好为圆盘自转频率两倍的时候，你的照片里黑线的位置，永远是下一张和上一张呈180度，看不出圆盘原来到底是顺时针转的还是逆时针转的。</p><h2 id="图像的内插和重采样"><a href="#图像的内插和重采样" class="headerlink" title="图像的内插和重采样"></a>图像的内插和重采样</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 最近邻内插算法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">img = cv.imread(<span class="string">"Fig0417(a)(barbara).tif"</span>, <span class="number">0</span>)</span><br><span class="line">height, width = img.shape</span><br><span class="line">fx = <span class="number">0.5</span></span><br><span class="line">fy = <span class="number">0.5</span></span><br><span class="line"></span><br><span class="line">new_height = int(fx*height)</span><br><span class="line">new_width = int(fy*width)</span><br><span class="line">new_img = np.zeros((new_height, new_width), dtype=np.uint8)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(height):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(width):</span><br><span class="line">        new_i = int(fx*i)</span><br><span class="line">        new_j = int(fy*j)</span><br><span class="line">        new_img[new_i, new_j] = img[i, j]</span><br><span class="line"></span><br><span class="line">new_img1 = cv.resize(img, (<span class="number">0</span>, <span class="number">0</span>), fx=<span class="number">0.5</span>, fy=<span class="number">0.5</span>, interpolation=cv.INTER_NEAREST)</span><br><span class="line">new_img2 = cv.resize(new_img1, (<span class="number">0</span>, <span class="number">0</span>), fx=<span class="number">2</span>, fy=<span class="number">2</span>, interpolation=cv.INTER_NEAREST)</span><br><span class="line">new_img3 = cv.resize(new_img, (<span class="number">0</span>, <span class="number">0</span>), fx=<span class="number">2</span>, fy=<span class="number">2</span>, interpolation=cv.INTER_NEAREST)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    cv.imshow(<span class="string">"img"</span>, img)</span><br><span class="line">    cv.imshow(<span class="string">'new_img'</span>, new_img)</span><br><span class="line">    cv.imshow(<span class="string">'new_img1'</span>, new_img1)</span><br><span class="line">    cv.imshow(<span class="string">'new_img2'</span>, new_img2)</span><br><span class="line">    cv.imshow(<span class="string">'new_img3'</span>, new_img3)</span><br><span class="line">    <span class="keyword">if</span> cv.waitKey(<span class="number">1</span>) == <span class="number">27</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20191018091016337.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20191018091021949.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20191018091029707.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191018091037874.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191018091046239.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 双线性内插法</span></span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">resize</span><span class="params">(src, fx, fy)</span>:</span></span><br><span class="line">    src_h, src_w = src.shape[:<span class="number">2</span>]</span><br><span class="line">    dst_w, dst_h = int(src_w*fx), int(src_h*fy)</span><br><span class="line">    <span class="keyword">if</span> fx == <span class="number">1</span> <span class="keyword">and</span> fy == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> src.copy()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 遍历目标图像，插值</span></span><br><span class="line">    dst = np.zeros((dst_h, dst_w, <span class="number">3</span>), dtype=np.uint8)</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">3</span>):  <span class="comment"># 对channel循环</span></span><br><span class="line">        <span class="keyword">for</span> dst_y <span class="keyword">in</span> range(dst_h):  <span class="comment"># 对height循环</span></span><br><span class="line">            <span class="keyword">for</span> dst_x <span class="keyword">in</span> range(dst_w):  <span class="comment"># 对width循环</span></span><br><span class="line">                <span class="comment"># 目标在源上的坐标</span></span><br><span class="line">                src_x = (dst_x + <span class="number">0.5</span>) / fx - <span class="number">0.5</span></span><br><span class="line">                src_y = (dst_y + <span class="number">0.5</span>) / fy - <span class="number">0.5</span></span><br><span class="line">                <span class="comment"># 计算在源图上四个近邻点的位置</span></span><br><span class="line">                src_x_0 = int(np.floor(src_x))</span><br><span class="line">                src_y_0 = int(np.floor(src_y))</span><br><span class="line">                src_x_1 = min(src_x_0 + <span class="number">1</span>, src_w - <span class="number">1</span>)</span><br><span class="line">                src_y_1 = min(src_y_0 + <span class="number">1</span>, src_h - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 双线性插值</span></span><br><span class="line">                value0 = (src_x_1 - src_x) * src[src_y_0, src_x_0, n] + (src_x - src_x_0) * src[src_y_0, src_x_1, n]</span><br><span class="line">                value1 = (src_x_1 - src_x) * src[src_y_1, src_x_0, n] + (src_x - src_x_0) * src[src_y_1, src_x_1, n]</span><br><span class="line">                dst[dst_y, dst_x, n] = int((src_y_1 - src_y) * value0 + (src_y - src_y_0) * value1)</span><br><span class="line">    <span class="keyword">return</span> dst</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    img = cv.imread(<span class="string">'Fig0417(a)(barbara).tif'</span>)</span><br><span class="line">    start = time.time()</span><br><span class="line">    img_out = resize(img, fx=<span class="number">0.5</span>, fy=<span class="number">0.5</span>)</span><br><span class="line">    img_out0 = cv.resize(img, (<span class="number">0</span>, <span class="number">0</span>), fx=<span class="number">0.5</span>, fy=<span class="number">0.5</span>, interpolation=cv.INTER_LINEAR_EXACT)</span><br><span class="line">    print(<span class="string">'cost '</span>+str(time.time() - start)+<span class="string">' seconds'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        cv.imshow(<span class="string">'src_image'</span>, img)</span><br><span class="line">        cv.imshow(<span class="string">'dst_image'</span>, img_out)</span><br><span class="line">        cv.imshow(<span class="string">'dst_image0'</span>, img_out0)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> cv.waitKey(<span class="number">1</span>) == <span class="number">27</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20191018152842615.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20191018152849116.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191018152855774.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>参考<br><a href="https://www.youtube.com/watch?v=r18Gi8lSkfM" target="_blank" rel="noopener">傅立叶变换，傅立叶序列以及频谱</a><br><a href="https://zh.wikipedia.org/wiki/%E5%82%85%E9%87%8C%E5%8F%B6%E7%BA%A7%E6%95%B0" target="_blank" rel="noopener">傅立叶级数</a><br><a href="https://www.cnblogs.com/h2zZhou/articles/8405717.html" target="_blank" rel="noopener">深入浅出的讲解傅里叶变换（真正的通俗易懂）</a><br><a href="https://github.com/numpy/numpy/blob/master/numpy/fft/_pocketfft.py#L98-L189" target="_blank" rel="noopener">numpy.fft.fft</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数字图像处理关于傅里叶变换的小记&quot;&gt;&lt;a href=&quot;#数字图像处理关于傅里叶变换的小记&quot; class=&quot;headerlink&quot; title=&quot;数字图像处理关于傅里叶变换的小记&quot;&gt;&lt;/a&gt;数字图像处理关于傅里叶变换的小记&lt;/h1&gt;&lt;p&gt;@[toc]&lt;/p&gt;
&lt;h2
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>图像翻转</title>
    <link href="http://yoursite.com/2019/11/10/%E5%9B%BE%E5%83%8F%E7%BF%BB%E8%BD%AC-1/"/>
    <id>http://yoursite.com/2019/11/10/图像翻转-1/</id>
    <published>2019-11-10T13:07:46.000Z</published>
    <updated>2019-11-11T10:40:55.789Z</updated>
    
    <content type="html"><![CDATA[<h1 id="图像翻转"><a href="#图像翻转" class="headerlink" title="图像翻转"></a>图像翻转</h1><p>我们可以利用仿射变换来翻转图片<br><strong>仿射变换参考链接</strong>:  </p><blockquote><p><a href="https://blog.csdn.net/qq_43309286/article/details/101595206" target="_blank" rel="noopener">https://blog.csdn.net/qq_43309286/article/details/101595206</a></p></blockquote><p>输入：<br><img src="https://img-blog.csdnimg.cn/20191002233420172.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="图像翻转90度"><a href="#图像翻转90度" class="headerlink" title="图像翻转90度"></a>图像翻转90度</h2><p>可以直接利用矩阵转置</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 图像翻转90度</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">img0 = cv.imread(<span class="string">'t3.jpg'</span>, <span class="number">0</span>)</span><br><span class="line">img0 = cv.resize(img0, (<span class="number">0</span>, <span class="number">0</span>), fx=<span class="number">0.2</span>, fy=<span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line">height, width = img0.shape</span><br><span class="line"></span><br><span class="line">img_arr = np.array(img0)</span><br><span class="line"></span><br><span class="line">new_img = np.zeros((height, width), dtype=<span class="string">'uint8'</span>)</span><br><span class="line"></span><br><span class="line">new_img = img_arr.T</span><br><span class="line"></span><br><span class="line">cv.imshow(<span class="string">'new_img'</span>, new_img)</span><br><span class="line">cv.waitKey(<span class="number">0</span>)</span><br><span class="line">cv.destroyAllWindows()</span><br></pre></td></tr></table></figure><p>输出：<br><img src="https://img-blog.csdnimg.cn/20191002233627248.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="图片翻转180度"><a href="#图片翻转180度" class="headerlink" title="图片翻转180度"></a>图片翻转180度</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 翻转180度</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">img0 = cv.imread(<span class="string">'t3.jpg'</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">height, width = img0.shape</span><br><span class="line"></span><br><span class="line">img_arr = np.array(img0)</span><br><span class="line"></span><br><span class="line">new_img = np.zeros((height, width), dtype=<span class="string">'uint8'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(height):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(width):</span><br><span class="line">        new_img[height<span class="number">-1</span>-i][width<span class="number">-1</span>-j] = img0[i][j]</span><br><span class="line"></span><br><span class="line">cv.imshow(<span class="string">'new_img'</span>, new_img)</span><br><span class="line">cv.waitKey(<span class="number">0</span>)</span><br><span class="line">cv.destroyAllWindows()</span><br></pre></td></tr></table></figure><p>输出：<img src="https://img-blog.csdnimg.cn/20191002233852766.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="图片倾斜"><a href="#图片倾斜" class="headerlink" title="图片倾斜"></a>图片倾斜</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 图片倾斜</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">img0 = cv.imread(<span class="string">'t3.jpg'</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">height, width = img0.shape</span><br><span class="line"></span><br><span class="line">img_arr = np.array(img0)</span><br><span class="line"></span><br><span class="line">new_img = np.zeros((height+<span class="number">100</span>, width+<span class="number">100</span>), dtype=<span class="string">'uint8'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(height):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(width):</span><br><span class="line">        new_img[int(i*np.cos(np.pi/<span class="number">4</span>)-j*np.sin(np.pi/<span class="number">4</span>))][int(i*np.sin(np.pi/<span class="number">4</span>)+j*np.cos(np.pi/<span class="number">4</span>))] = img0[i][j]</span><br><span class="line">        <span class="comment"># new_img[i][2*i+j] = img0[i][j]</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    cv.imshow(<span class="string">'new_img'</span>, new_img)</span><br><span class="line">    <span class="keyword">if</span> (cv.waitKey(<span class="number">1</span>) == <span class="number">27</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>输出：<br><img src="https://img-blog.csdnimg.cn/20191002233959542.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;图像翻转&quot;&gt;&lt;a href=&quot;#图像翻转&quot; class=&quot;headerlink&quot; title=&quot;图像翻转&quot;&gt;&lt;/a&gt;图像翻转&lt;/h1&gt;&lt;p&gt;我们可以利用仿射变换来翻转图片&lt;br&gt;&lt;strong&gt;仿射变换参考链接&lt;/strong&gt;:  &lt;/p&gt;
&lt;blockquot
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>灰度取反</title>
    <link href="http://yoursite.com/2019/11/10/%E7%81%B0%E5%BA%A6%E5%8F%96%E5%8F%8D-1/"/>
    <id>http://yoursite.com/2019/11/10/灰度取反-1/</id>
    <published>2019-11-10T13:07:21.000Z</published>
    <updated>2019-11-11T10:41:31.728Z</updated>
    
    <content type="html"><![CDATA[<h1 id="灰度取反"><a href="#灰度取反" class="headerlink" title="灰度取反"></a>灰度取反</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 灰度取反</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">img = cv.imread(<span class="string">'t1.jpg'</span>)</span><br><span class="line"></span><br><span class="line">height, width, channel = img.shape</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(height):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(width):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(channel):</span><br><span class="line">            img[i][j][k] = <span class="number">255</span>-img[i][j][k]</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    cv.imshow(<span class="string">'img'</span>, img)</span><br><span class="line">    <span class="keyword">if</span>(cv.waitKey(<span class="number">0</span>) == <span class="number">27</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">cv.destroyAllWindows()</span><br></pre></td></tr></table></figure><p>输入：<br><img src="https://img-blog.csdnimg.cn/20191002232557821.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>输出：<br><img src="https://img-blog.csdnimg.cn/20191002232619187.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;灰度取反&quot;&gt;&lt;a href=&quot;#灰度取反&quot; class=&quot;headerlink&quot; title=&quot;灰度取反&quot;&gt;&lt;/a&gt;灰度取反&lt;/h1&gt;&lt;figure class=&quot;highlight py&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>计算灰度图的均值和方差</title>
    <link href="http://yoursite.com/2019/11/10/%E8%AE%A1%E7%AE%97%E7%81%B0%E5%BA%A6%E5%9B%BE%E7%9A%84%E5%9D%87%E5%80%BC%E5%92%8C%E6%96%B9%E5%B7%AE-1/"/>
    <id>http://yoursite.com/2019/11/10/计算灰度图的均值和方差-1/</id>
    <published>2019-11-10T13:06:59.000Z</published>
    <updated>2019-11-11T10:42:03.902Z</updated>
    
    <content type="html"><![CDATA[<h1 id="计算灰度图的均值和方差"><a href="#计算灰度图的均值和方差" class="headerlink" title="计算灰度图的均值和方差"></a>计算灰度图的均值和方差</h1><p>@[toc]</p><h2 id="均值"><a href="#均值" class="headerlink" title="均值"></a>均值</h2><p>图片的灰度均值是各个像素点的灰度值的平均值</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算灰度均值</span></span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"></span><br><span class="line">img = cv.imread(<span class="string">'t0.jpg'</span>, <span class="number">0</span>)</span><br><span class="line">height, width = img.shape</span><br><span class="line">size = img.size</span><br><span class="line"></span><br><span class="line">average = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(height):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(width):</span><br><span class="line">        average += img[i][j]/size</span><br><span class="line"></span><br><span class="line">print(average)</span><br></pre></td></tr></table></figure><h2 id="方差"><a href="#方差" class="headerlink" title="方差"></a>方差</h2><p><img src="https://img-blog.csdnimg.cn/20191002232059572.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算灰度方差</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"></span><br><span class="line">img = cv.imread(<span class="string">'t0.jpg'</span>, <span class="number">0</span>)</span><br><span class="line">height, width = img.shape</span><br><span class="line">size = img.size</span><br><span class="line"></span><br><span class="line">p = [<span class="number">0</span>]*<span class="number">256</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(height):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(width):</span><br><span class="line">        p[img[i][j]] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">m = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">    p[i] /= <span class="number">256</span></span><br><span class="line">    m += i*p[i]</span><br><span class="line"></span><br><span class="line">s = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">    s += (i-m)*(i-m)*p[i]</span><br><span class="line"></span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;计算灰度图的均值和方差&quot;&gt;&lt;a href=&quot;#计算灰度图的均值和方差&quot; class=&quot;headerlink&quot; title=&quot;计算灰度图的均值和方差&quot;&gt;&lt;/a&gt;计算灰度图的均值和方差&lt;/h1&gt;&lt;p&gt;@[toc]&lt;/p&gt;
&lt;h2 id=&quot;均值&quot;&gt;&lt;a href=&quot;#均
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>数字图像处理——直方图匹配【像素级别处理】（python）</title>
    <link href="http://yoursite.com/2019/11/10/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E2%80%94%E2%80%94%E7%9B%B4%E6%96%B9%E5%9B%BE%E5%8C%B9%E9%85%8D%E3%80%90%E5%83%8F%E7%B4%A0%E7%BA%A7%E5%88%AB%E5%A4%84%E7%90%86%E3%80%91%EF%BC%88python%EF%BC%89/"/>
    <id>http://yoursite.com/2019/11/10/数字图像处理——直方图匹配【像素级别处理】（python）/</id>
    <published>2019-11-10T13:03:26.000Z</published>
    <updated>2019-11-10T13:04:45.479Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数字图像处理——直方图匹配【像素级别处理】（python）"><a href="#数字图像处理——直方图匹配【像素级别处理】（python）" class="headerlink" title="数字图像处理——直方图匹配【像素级别处理】（python）"></a>数字图像处理——直方图匹配【像素级别处理】（python）</h1><p>@[toc]</p><h2 id="直方图匹配实现步骤"><a href="#直方图匹配实现步骤" class="headerlink" title="直方图匹配实现步骤"></a>直方图匹配实现步骤</h2><ol><li>由输入图像得到p<del>r</del>( r) ，并由$(L-1)\int_{0}^{r}$P<del>r</del>$( w)dw$求得s的值</li><li>使用$G(z)=(L-1)\int_{0}^{r}$P<del>z</del>$( t)dt$中指定的PDF来求得变换函数$G(z)$</li><li>求得反变换函数$z=G$^-1^$(x)$  ;因为z是由s得到的，所以处理是s到z 的映射，而后者正是我们所期望的值</li><li>首先用$(L-1)\int_{0}^{r}$P<del>r</del>$( w)dw$对输入的图像进行均衡得到输出图像；该图像的像素值是s值，对均衡后的图像中具有s值的每一个像素执行$z=G$^-1^$(x)$，得到输出图像中的相应像素。当所有像素处理完后，输出图像的PDF将等于指定的PDF。</li></ol><p>对于反函数的变换就是x与y互换，若存在函数$u=f(x)$、$v=g(x)$,其$g(x)$为$f(x)$的反函数，即$f$^-1^$(x)=g(x)$可表示为$v=g(f(x))$</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>输入：<br><img src="https://img-blog.csdnimg.cn/20191110203613257.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">'Fig0323.tif'</span>)  <span class="comment"># 月球表面图片</span></span><br><span class="line">H = img.shape[<span class="number">0</span>]</span><br><span class="line">W = img.shape[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">x = np.arange(<span class="number">256</span>)  <span class="comment"># 作为index使用</span></span><br><span class="line">hr = np.zeros(<span class="number">256</span>)  <span class="comment"># 原始图片的灰度统计</span></span><br><span class="line">pr = np.zeros(<span class="number">256</span>)  <span class="comment"># 原始图片的概率密度</span></span><br><span class="line">rtos = np.zeros(<span class="number">256</span>)  <span class="comment"># r-s对应关系</span></span><br><span class="line">hs = np.zeros(<span class="number">256</span>)  <span class="comment"># 直方图均衡之后的灰度值</span></span><br><span class="line">thz = np.zeros(<span class="number">256</span>)  <span class="comment"># 目标直方图灰度值</span></span><br><span class="line">tpz = np.zeros(<span class="number">256</span>)  <span class="comment"># 目标直方图的概率密度</span></span><br><span class="line">rtoz = np.zeros(<span class="number">256</span>)  <span class="comment"># r-z的对应关系</span></span><br><span class="line">Gz = np.zeros(<span class="number">256</span>)  <span class="comment"># G(z)的值</span></span><br><span class="line">Zg = np.zeros(<span class="number">256</span>)  <span class="comment"># G(z)的反函数</span></span><br><span class="line">hz = np.zeros(<span class="number">256</span>)  <span class="comment"># 实际得到的匹配图像的直方图</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计原始图片的直方图</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> range(H):</span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> range(W):</span><br><span class="line">        hr[img[row, col]] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 直方图均衡</span></span><br><span class="line"><span class="comment"># 先计算概率密度</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">    pr[i] = hr[i] / (H * W)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">256</span>):  <span class="comment"># i=[0,255]</span></span><br><span class="line">    temp = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>):  <span class="comment"># j=[0,i]</span></span><br><span class="line">        temp += pr[j]</span><br><span class="line">    rtos[i] = round(temp * <span class="number">255</span>)  <span class="comment"># 四舍五入取整</span></span><br><span class="line"></span><br><span class="line">hisImg = np.zeros((H, W, <span class="number">3</span>), np.uint8)  <span class="comment"># 建立直方图均衡变换之后的图片</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> range(H):</span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> range(W):</span><br><span class="line">        hisImg[row, col] = rtos[img[row, col]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计均衡后的图片的直方图</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> range(H):</span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> range(W):</span><br><span class="line">        hs[hisImg[row, col]] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用类似于图3.25a的概率分布图（估计值）</span></span><br><span class="line"><span class="comment"># 对应的几个拐点</span></span><br><span class="line"><span class="comment">#   i    thz</span></span><br><span class="line"><span class="comment">#   0     0</span></span><br><span class="line"><span class="comment">#   4     400000</span></span><br><span class="line"><span class="comment">#   16    45600</span></span><br><span class="line"><span class="comment">#   185   0</span></span><br><span class="line"><span class="comment">#   205   34200</span></span><br><span class="line"><span class="comment">#   255   0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">    <span class="keyword">if</span> i &lt; <span class="number">5</span>:</span><br><span class="line">        thz[i] = i * <span class="number">100000</span></span><br><span class="line">    <span class="keyword">elif</span> i &lt; <span class="number">17</span>:</span><br><span class="line">        thz[i] = <span class="number">518133</span> - <span class="number">29533</span> * i</span><br><span class="line">    <span class="keyword">elif</span> i &lt; <span class="number">186</span>:</span><br><span class="line">        thz[i] = <span class="number">49950</span> - i * <span class="number">270</span></span><br><span class="line">    <span class="keyword">elif</span> i &lt; <span class="number">206</span>:</span><br><span class="line">        thz[i] = <span class="number">1710</span> * (i - <span class="number">185</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        thz[i] = <span class="number">684</span> * (<span class="number">255</span> - i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计目标直方图的概率分布</span></span><br><span class="line">ztotal = np.sum(thz)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">    tpz[i] = thz[i] / ztotal</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算G(z)的值，同样采用直方图均衡化方法</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">256</span>):  <span class="comment"># i=[0,255]</span></span><br><span class="line">    temp = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>):  <span class="comment"># j=[0,i]</span></span><br><span class="line">        temp += tpz[j]</span><br><span class="line">    Gz[i] = round(temp * <span class="number">255</span>)  <span class="comment"># 四舍五入取整</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for i in range(256):</span></span><br><span class="line"><span class="comment">#    print(i, Gz[i])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 因为给出的概率分布没有水平线，所以Gz是单调递增的（除了一个点x=185）</span></span><br><span class="line"><span class="comment"># 这里考虑没有单调增的情况，实现r-&gt;s-&gt;Gz-&gt;z的映射</span></span><br><span class="line"><span class="comment"># 求G(z)的反函数，这样求出来的反函数可能会有某个Zg[i]==0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">    Zg[int(Gz[i])] = i</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">256</span>):</span><br><span class="line">    <span class="keyword">if</span> Zg[i] == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">256</span>):  <span class="comment"># 如果Zg[i]为0，则从左右开始搜索最接近i的非零值，设置为Zg[i]的值</span></span><br><span class="line">            <span class="keyword">if</span> i - j &gt;= <span class="number">0</span> <span class="keyword">and</span> Zg[i - j] != <span class="number">0</span>:</span><br><span class="line">                Zg[i] = Zg[i - j]</span><br><span class="line">            <span class="keyword">elif</span> i + j &lt; <span class="number">256</span> <span class="keyword">and</span> Zg[i + j] != <span class="number">0</span>:</span><br><span class="line">                Zg[i] = Zg[i + j]</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">SpecifiedImg = np.zeros((H, W, <span class="number">3</span>), dtype=np.uint8)  <span class="comment"># 建立规定直方图变换之后的图片</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 求出r-&gt;s-&gt;Gz-&gt;z的映射</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">    rtoz[i] = Zg[int(rtos[i])]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用新的映射绘制新图</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> range(H):</span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> range(W):</span><br><span class="line">        SpecifiedImg[row, col] = rtoz[img[row, col]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计真正匹配图像的直方图</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> range(H):</span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> range(W):</span><br><span class="line">        hz[SpecifiedImg[row, col]] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(hz)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 原图</span></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>)</span><br><span class="line">plt.axis(<span class="string">'off'</span>)</span><br><span class="line">plt.title(<span class="string">'Original image'</span>)</span><br><span class="line">plt.imshow(img)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 原图的直方图</span></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">4</span>, <span class="number">2</span>)</span><br><span class="line">plt.bar(x, hr)</span><br><span class="line">plt.title(<span class="string">'Histogram of original image'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 均衡后的图片</span></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>)</span><br><span class="line">plt.axis(<span class="string">'off'</span>)</span><br><span class="line">plt.title(<span class="string">'After equalization'</span>)</span><br><span class="line">plt.imshow(hisImg)</span><br><span class="line"></span><br><span class="line"><span class="comment"># r-&gt;s的变化函数</span></span><br><span class="line"><span class="comment"># plt.subplot(3, 2, 4)</span></span><br><span class="line"><span class="comment"># plt.title('s=T(r)')</span></span><br><span class="line"><span class="comment"># plt.scatter(x, rtos)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 均衡化后的直方图</span></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">4</span>, <span class="number">4</span>)</span><br><span class="line">plt.title(<span class="string">'Histogram after equalization'</span>)</span><br><span class="line">plt.bar(x, hs)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 目标直方图</span></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">plt.title(<span class="string">'Specified histogram'</span>)</span><br><span class="line">plt.plot(x, thz)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Gz和Zg</span></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>)</span><br><span class="line">plt.title(<span class="string">'G(z) and its reverse'</span>)</span><br><span class="line">plt.plot(x, Gz, Zg)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新的图片</span></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">4</span>, <span class="number">7</span>)</span><br><span class="line">plt.axis(<span class="string">'off'</span>)</span><br><span class="line">plt.title(<span class="string">'Specified Image'</span>)</span><br><span class="line">plt.imshow(SpecifiedImg)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新的直方图</span></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">4</span>, <span class="number">8</span>)</span><br><span class="line">plt.title(<span class="string">'Real specified histogram'</span>)</span><br><span class="line">plt.bar(x, hz)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>输出</p><p><img src="https://img-blog.csdnimg.cn/20191110203628728.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5Mjg2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数字图像处理——直方图匹配【像素级别处理】（python）&quot;&gt;&lt;a href=&quot;#数字图像处理——直方图匹配【像素级别处理】（python）&quot; class=&quot;headerlink&quot; title=&quot;数字图像处理——直方图匹配【像素级别处理】（python）&quot;&gt;&lt;/a
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>数字图像处理之仿射变换</title>
    <link href="http://yoursite.com/2019/09/28/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E4%B9%8B%E4%BB%BF%E5%B0%84%E5%8F%98%E6%8D%A2/"/>
    <id>http://yoursite.com/2019/09/28/数字图像处理之仿射变换/</id>
    <published>2019-09-27T17:05:51.000Z</published>
    <updated>2019-09-27T17:17:50.608Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数字图像处理之仿射变换"><a href="#数字图像处理之仿射变换" class="headerlink" title="数字图像处理之仿射变换"></a>数字图像处理之仿射变换</h1><p>$$<br> \left[<br> \begin{matrix}<br>   1 &amp; 2 &amp; 3 \</p><p>   4 &amp; 5 &amp; 6 \</p><p>   7 &amp; 8 &amp; 9<br>  \end{matrix}<br>  \right] \tag{3}<br>$$</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数字图像处理之仿射变换&quot;&gt;&lt;a href=&quot;#数字图像处理之仿射变换&quot; class=&quot;headerlink&quot; title=&quot;数字图像处理之仿射变换&quot;&gt;&lt;/a&gt;数字图像处理之仿射变换&lt;/h1&gt;&lt;p&gt;$$&lt;br&gt; \left[&lt;br&gt; \begin{matrix}&lt;b
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Numpy之random随机数</title>
    <link href="http://yoursite.com/2019/09/20/Numpy%E4%B9%8Brandom%E9%9A%8F%E6%9C%BA%E6%95%B0/"/>
    <id>http://yoursite.com/2019/09/20/Numpy之random随机数/</id>
    <published>2019-09-19T23:36:14.000Z</published>
    <updated>2019-09-20T02:29:51.878Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Numpy之random随机数"><a href="#Numpy之random随机数" class="headerlink" title="Numpy之random随机数"></a>Numpy之random随机数</h1><h2 id="numpy-random-rand"><a href="#numpy-random-rand" class="headerlink" title="numpy.random.rand()"></a><a href="https://numpy.org/devdocs/reference/random/generated/numpy.random.RandomState.rand.html?highlight=rand#numpy.random.RandomState.rand" target="_blank" rel="noopener">numpy.random.rand()</a></h2><blockquote><p><font size="4">原型: numpy.random.rand(d1,d2,…,dn)</font></p></blockquote><p>参数：d0，d1，…，dn ： int，可选</p><p>作用：<br>通过本函数可以返回一个或一组服从“0~1”均匀分布的随机样本值。随机样本取值范围是[0,1)，不包括1,返回数组的尺寸必须为非负数。如果没有给出参数，则返回单个Python float,如果给出参数，则已矩阵的形式返回</p><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">print(np.random.rand())</span><br><span class="line">print(np.random.rand(<span class="number">1</span>))</span><br><span class="line">print(np.random.rand(<span class="number">2</span>))</span><br><span class="line">print(np.random.rand(<span class="number">3</span>, <span class="number">4</span>))</span><br></pre></td></tr></table></figure><p>输出 </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.09171627765988688</span></span><br><span class="line">[<span class="number">0.09575984</span>]</span><br><span class="line">[<span class="number">0.19469911</span> <span class="number">0.81856321</span>]</span><br><span class="line">[[<span class="number">0.28504605</span> <span class="number">0.81288214</span> <span class="number">0.32771727</span> <span class="number">0.32690197</span>]</span><br><span class="line"> [<span class="number">0.74796654</span> <span class="number">0.44727993</span> <span class="number">0.85740141</span> <span class="number">0.48064927</span>]</span><br><span class="line"> [<span class="number">0.82486295</span> <span class="number">0.73778363</span> <span class="number">0.89627339</span> <span class="number">0.49659976</span>]]</span><br></pre></td></tr></table></figure><h2 id="numpy-random-randn"><a href="#numpy-random-randn" class="headerlink" title="numpy.random.randn()"></a><a href="https://numpy.org/devdocs/reference/random/generated/numpy.random.RandomState.randn.html" target="_blank" rel="noopener">numpy.random.randn()</a></h2><blockquote><p><font size="4">原型: numpy.random.randn(d1,d2,…,dn)</font></p></blockquote><p>如果提供了正int_like参数，则randn生成一个形状数组，填充从均值0和方差1的单变量“正态”（高斯）分布中采样的随机浮点数。如果未提供参数，则返回从分布中随机抽样的单个浮点数。</p><p>参数：</p><p>d0，d1，…，dn ： int，可选<br>返回数组的尺寸必须为非负数。如果没有给出参数，则返回单个Python float。</p><p>返回：</p><p>Z ： ndarray或漂浮<br>来自标准正态分布的A 形浮点样本数组，如果没有提供参数，则为单个浮点数。</p><p><img src="/2019/09/20/Numpy之random随机数/t1.gif" alt="aratar"></p><h3 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">print(np.random.randn())</span><br><span class="line">print(np.random.randn(<span class="number">1</span>))</span><br><span class="line">print(np.random.randn(<span class="number">2</span>))</span><br><span class="line">print(np.random.randn(<span class="number">3</span>, <span class="number">4</span>))</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[0.70899409]</span><br><span class="line">[-0.13214787  0.8956988 ]</span><br><span class="line">[[ 1.31895234  1.05841556 -0.05109841 -1.953933  ]</span><br><span class="line"> [-0.68466894  1.83323997 -1.51220225  0.72683569]</span><br><span class="line"> [ 1.19163007  0.2525111  -0.94921882  0.10838818]]</span><br></pre></td></tr></table></figure><font size="4">对于对于随机样本N（\ mu，\ sigma ^ 2），请使用： <font color="#f00">sigma * np.random.randn(...) + mu</font></font><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">sigma = <span class="number">100</span></span><br><span class="line">mu = <span class="number">10</span></span><br><span class="line"><span class="comment"># N(100,10000)</span></span><br><span class="line">print(sigma * np.random.randn(<span class="number">2</span>, <span class="number">4</span>) + mu)</span><br></pre></td></tr></table></figure><p>输出 </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[[ <span class="number">120.83046615</span>   <span class="number">55.68406043</span>  <span class="number">-86.11764759</span> <span class="number">-149.7929397</span> ]</span><br><span class="line"> [ <span class="number">-56.12066366</span>   <span class="number">75.96162994</span>   <span class="number">26.24926713</span>  <span class="number">163.52869634</span>]]</span><br></pre></td></tr></table></figure><h2 id="numpy-random-randint"><a href="#numpy-random-randint" class="headerlink" title="numpy.random.randint()"></a><a href="https://numpy.org/devdocs/reference/random/generated/numpy.random.RandomState.randint.html?highlight=randint#numpy.random.RandomState.randint" target="_blank" rel="noopener">numpy.random.randint()</a></h2><blockquote><p><font size="4">原型：numpy.random.randint(low, high=None, size=None, dtype=’l’)</font></p></blockquote><p>返回随机整数，范围区间为[low,high），包含low，不包含high</p><p>参数：low为最小值，high为最大值，size为数组维度大小，dtype为数据类型，默认的数据类型是np.int，high没有填写时，默认生成随机数的范围是[0，low)</p><p>参数：</p><p>low ： int或类似int的数组<br>要从分布中绘制的最低（有符号）整数（除非 high=None，在这种情况下，此参数是高于 最高此类整数的一个）。</p><p>high ： int或类似int的int，可选<br>如果提供，则在从分布中提取的最大（有符号）整数之上（如果行为，请参见上文high=None）。如果是数组，则必须包含整数值</p><p>size ： int或int的元组，可选<br>输出形状。如果给定的形状是例如，则 绘制样本。默认值为None，在这种情况下返回单个值。(m, n, k)m * n * k</p><p>dtype ： dtype，可选<br>期望的结果dtype。所有dtypes都由它们的名称决定，即’int64’，’int’等，因此byteorder不可用，并且具体的精度可能有不同的C类型，具体取决于平台。默认值为’np.int’。</p><p>返回：<br>out ： int或ndarray of int<br>来自适当分布的大小形状的随机整数数组，如果未提供大小，则为单个此类随机整数。</p><h3 id="代码示例-2"><a href="#代码示例-2" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">print(np.random.randint(<span class="number">1</span>))</span><br><span class="line">print(np.random.randint(<span class="number">1</span>, size=(<span class="number">2</span>, <span class="number">2</span>)))</span><br><span class="line">print(np.random.randint(<span class="number">0</span>, <span class="number">10</span>))</span><br><span class="line">print(np.random.randint(<span class="number">0</span>, <span class="number">10</span>, size=(<span class="number">2</span>, <span class="number">5</span>)))</span><br><span class="line">print(np.random.randint(<span class="number">1</span>, <span class="number">20</span>, size=(<span class="number">4</span>, <span class="number">4</span>), dtype=<span class="string">'uint8'</span>))</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span></span><br><span class="line">[[<span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span>]]</span><br><span class="line"><span class="number">7</span></span><br><span class="line">[[<span class="number">3</span> <span class="number">4</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">1</span> <span class="number">6</span> <span class="number">3</span> <span class="number">1</span> <span class="number">2</span>]]</span><br><span class="line">[[<span class="number">17</span> <span class="number">15</span> <span class="number">19</span>  <span class="number">8</span>]</span><br><span class="line"> [<span class="number">18</span> <span class="number">12</span> <span class="number">19</span> <span class="number">12</span>]</span><br><span class="line"> [ <span class="number">2</span>  <span class="number">3</span> <span class="number">15</span> <span class="number">15</span>]</span><br><span class="line"> [ <span class="number">5</span>  <span class="number">6</span> <span class="number">10</span> <span class="number">14</span>]]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Numpy之random随机数&quot;&gt;&lt;a href=&quot;#Numpy之random随机数&quot; class=&quot;headerlink&quot; title=&quot;Numpy之random随机数&quot;&gt;&lt;/a&gt;Numpy之random随机数&lt;/h1&gt;&lt;h2 id=&quot;numpy-random-
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Numpy之矩阵的堆叠与拆分</title>
    <link href="http://yoursite.com/2019/09/10/Numpy%E4%B9%8B%E7%9F%A9%E9%98%B5%E7%9A%84%E5%A0%86%E5%8F%A0%E4%B8%8E%E6%8B%86%E5%88%86/"/>
    <id>http://yoursite.com/2019/09/10/Numpy之矩阵的堆叠与拆分/</id>
    <published>2019-09-10T12:07:16.000Z</published>
    <updated>2019-09-14T09:46:26.400Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Numpy之矩阵的堆叠与拆分"><a href="#Numpy之矩阵的堆叠与拆分" class="headerlink" title="Numpy之矩阵的堆叠与拆分"></a>Numpy之矩阵的堆叠与拆分</h1><h2 id="矩阵的堆叠"><a href="#矩阵的堆叠" class="headerlink" title="矩阵的堆叠"></a>矩阵的堆叠</h2><h3 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h3><blockquote><p>原型：numpy.stack(arrary a, axis=0)</p></blockquote><p>功能：矩阵堆叠扩展1个维度</p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a=[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">   [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]]</span><br><span class="line">b=[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">   [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]]</span><br><span class="line">c=[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">   [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]]</span><br><span class="line">print(<span class="string">"a="</span>,a)</span><br><span class="line">print(<span class="string">"b="</span>,b)</span><br><span class="line">print(<span class="string">"c="</span>,c)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"增加一维，新维度的下标为0"</span>)</span><br><span class="line">d=np.stack((a,b,c),axis=<span class="number">0</span>)</span><br><span class="line">print(d)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"增加一维，新维度的下标为1"</span>)</span><br><span class="line">d=np.stack((a,b,c),axis=<span class="number">1</span>)</span><br><span class="line">print(d)</span><br><span class="line">print(<span class="string">"增加一维，新维度的下标为2"</span>)</span><br><span class="line">d=np.stack((a,b,c),axis=<span class="number">2</span>)</span><br><span class="line">print(d)</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">a= [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]]</span><br><span class="line">b= [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]]</span><br><span class="line">c= [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]]</span><br><span class="line">增加一维，新维度的下标为<span class="number">0</span></span><br><span class="line">[[[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line">  [<span class="number">4</span> <span class="number">5</span> <span class="number">6</span>]]</span><br><span class="line"></span><br><span class="line"> [[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line">  [<span class="number">4</span> <span class="number">5</span> <span class="number">6</span>]]</span><br><span class="line"></span><br><span class="line"> [[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line">  [<span class="number">4</span> <span class="number">5</span> <span class="number">6</span>]]]</span><br><span class="line">增加一维，新维度的下标为<span class="number">1</span></span><br><span class="line">[[[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line">  [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line">  [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]]</span><br><span class="line"></span><br><span class="line"> [[<span class="number">4</span> <span class="number">5</span> <span class="number">6</span>]</span><br><span class="line">  [<span class="number">4</span> <span class="number">5</span> <span class="number">6</span>]</span><br><span class="line">  [<span class="number">4</span> <span class="number">5</span> <span class="number">6</span>]]]</span><br><span class="line">增加一维，新维度的下标为<span class="number">2</span></span><br><span class="line">[[[<span class="number">1</span> <span class="number">1</span> <span class="number">1</span>]</span><br><span class="line">  [<span class="number">2</span> <span class="number">2</span> <span class="number">2</span>]</span><br><span class="line">  [<span class="number">3</span> <span class="number">3</span> <span class="number">3</span>]]</span><br><span class="line"></span><br><span class="line"> [[<span class="number">4</span> <span class="number">4</span> <span class="number">4</span>]</span><br><span class="line">  [<span class="number">5</span> <span class="number">5</span> <span class="number">5</span>]</span><br><span class="line">  [<span class="number">6</span> <span class="number">6</span> <span class="number">6</span>]]]</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">b=[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line">c=[<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]</span><br><span class="line">print(<span class="string">"a="</span>,a)</span><br><span class="line">print(<span class="string">"b="</span>,b)</span><br><span class="line">print(<span class="string">"c="</span>,c)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"增加一维，新维度的下标为0"</span>)</span><br><span class="line">d=np.stack((a,b,c),axis=<span class="number">0</span>)</span><br><span class="line">print(d)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"增加一维，新维度的下标为1"</span>)</span><br><span class="line">d=np.stack((a,b,c),axis=<span class="number">1</span>)</span><br><span class="line">print(d)</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a= [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">b= [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line">c= [<span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>]</span><br><span class="line">增加一维，新维度的下标为<span class="number">0</span></span><br><span class="line">[[ <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>]</span><br><span class="line"> [ <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>]</span><br><span class="line"> [ <span class="number">9</span> <span class="number">10</span> <span class="number">11</span> <span class="number">12</span>]]</span><br><span class="line">增加一维，新维度的下标为<span class="number">1</span></span><br><span class="line">[[ <span class="number">1</span>  <span class="number">5</span>  <span class="number">9</span>]</span><br><span class="line"> [ <span class="number">2</span>  <span class="number">6</span> <span class="number">10</span>]</span><br><span class="line"> [ <span class="number">3</span>  <span class="number">7</span> <span class="number">11</span>]</span><br><span class="line"> [ <span class="number">4</span>  <span class="number">8</span> <span class="number">12</span>]]</span><br></pre></td></tr></table></figure><h3 id="vstack"><a href="#vstack" class="headerlink" title="vstack"></a>vstack</h3><blockquote><p>原型：numpy.vstack(array a, array b)</p></blockquote><p>功能：把b矩阵在a的基础上扩充行</p><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.floor(<span class="number">10</span>*np.random.random((<span class="number">3</span>, <span class="number">3</span>)))</span><br><span class="line">print(a)</span><br><span class="line">print(<span class="string">"================="</span>)</span><br><span class="line">b = np.floor(<span class="number">10</span>*np.random.random((<span class="number">3</span>, <span class="number">3</span>)))</span><br><span class="line">print(b)</span><br><span class="line">print(<span class="string">"================="</span>)</span><br><span class="line">print(np.vstack((a, b)))</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="number">6.</span> <span class="number">8.</span> <span class="number">3.</span>]</span><br><span class="line"> [<span class="number">8.</span> <span class="number">7.</span> <span class="number">3.</span>]</span><br><span class="line"> [<span class="number">2.</span> <span class="number">4.</span> <span class="number">4.</span>]]</span><br><span class="line">=================</span><br><span class="line">[[<span class="number">3.</span> <span class="number">9.</span> <span class="number">3.</span>]</span><br><span class="line"> [<span class="number">1.</span> <span class="number">3.</span> <span class="number">9.</span>]</span><br><span class="line"> [<span class="number">1.</span> <span class="number">8.</span> <span class="number">4.</span>]]</span><br><span class="line">=================</span><br><span class="line">[[<span class="number">6.</span> <span class="number">8.</span> <span class="number">3.</span>]</span><br><span class="line"> [<span class="number">8.</span> <span class="number">7.</span> <span class="number">3.</span>]</span><br><span class="line"> [<span class="number">2.</span> <span class="number">4.</span> <span class="number">4.</span>]</span><br><span class="line"> [<span class="number">3.</span> <span class="number">9.</span> <span class="number">3.</span>]</span><br><span class="line"> [<span class="number">1.</span> <span class="number">3.</span> <span class="number">9.</span>]</span><br><span class="line"> [<span class="number">1.</span> <span class="number">8.</span> <span class="number">4.</span>]]</span><br></pre></td></tr></table></figure><h3 id="hstack"><a href="#hstack" class="headerlink" title="hstack"></a>hstack</h3><blockquote><p>原型：numpy.hstack(array a, array b)</p></blockquote><p>功能：把b矩阵在a的基础上扩充列</p><h4 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.floor(<span class="number">10</span>*np.random.random((<span class="number">3</span>, <span class="number">3</span>)))</span><br><span class="line">print(a)</span><br><span class="line">print(<span class="string">"================="</span>)</span><br><span class="line">b = np.floor(<span class="number">10</span>*np.random.random((<span class="number">3</span>, <span class="number">3</span>)))</span><br><span class="line">print(b)</span><br><span class="line">print(<span class="string">"================="</span>)</span><br><span class="line">print(np.hstack((a, b)))</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="number">6.</span> <span class="number">8.</span> <span class="number">3.</span>]</span><br><span class="line"> [<span class="number">8.</span> <span class="number">7.</span> <span class="number">3.</span>]</span><br><span class="line"> [<span class="number">2.</span> <span class="number">4.</span> <span class="number">4.</span>]]</span><br><span class="line">=================</span><br><span class="line">[[<span class="number">3.</span> <span class="number">9.</span> <span class="number">3.</span>]</span><br><span class="line"> [<span class="number">1.</span> <span class="number">3.</span> <span class="number">9.</span>]</span><br><span class="line"> [<span class="number">1.</span> <span class="number">8.</span> <span class="number">4.</span>]]</span><br><span class="line">=================</span><br><span class="line">[[<span class="number">6.</span> <span class="number">8.</span> <span class="number">3.</span> <span class="number">3.</span> <span class="number">9.</span> <span class="number">3.</span>]</span><br><span class="line"> [<span class="number">8.</span> <span class="number">7.</span> <span class="number">3.</span> <span class="number">1.</span> <span class="number">3.</span> <span class="number">9.</span>]</span><br><span class="line"> [<span class="number">2.</span> <span class="number">4.</span> <span class="number">4.</span> <span class="number">1.</span> <span class="number">8.</span> <span class="number">4.</span>]]</span><br></pre></td></tr></table></figure><h3 id="column-stack"><a href="#column-stack" class="headerlink" title="column_stack"></a>column_stack</h3><blockquote><p>原型：numpy.column_stack(array a)</p></blockquote><p>功能：将一维矩阵作为列堆叠成二维矩阵</p><h4 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> newaxis</span><br><span class="line"></span><br><span class="line">a = np.floor(<span class="number">10</span>*np.random.random((<span class="number">3</span>, <span class="number">3</span>)))</span><br><span class="line">print(a)</span><br><span class="line">print(<span class="string">"================="</span>)</span><br><span class="line">b = np.floor(<span class="number">10</span>*np.random.random((<span class="number">3</span>, <span class="number">3</span>)))</span><br><span class="line">print(b)</span><br><span class="line">print(<span class="string">"================="</span>)</span><br><span class="line">print(np.column_stack((a, b)))</span><br><span class="line">print(<span class="string">"================="</span>)</span><br><span class="line">a = np.array([<span class="number">4.</span>, <span class="number">2.</span>])</span><br><span class="line">b = np.array([<span class="number">3.</span>, <span class="number">8.</span>])</span><br><span class="line">print(np.column_stack((a, b)))</span><br><span class="line">print(<span class="string">"================="</span>)</span><br><span class="line">print(a[:, newaxis])</span><br><span class="line">print(<span class="string">"================="</span>)</span><br><span class="line">print(b[:, newaxis])</span><br><span class="line">print(<span class="string">"================="</span>)</span><br><span class="line">print(np.column_stack((a[:, newaxis], b[:, newaxis])))</span><br><span class="line">print(<span class="string">"================="</span>)</span><br><span class="line">print(np.hstack((a[:, newaxis], b[:, newaxis])))</span><br><span class="line">print(<span class="string">"================="</span>)</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="number">3.</span> <span class="number">5.</span> <span class="number">6.</span>]</span><br><span class="line"> [<span class="number">3.</span> <span class="number">2.</span> <span class="number">4.</span>]</span><br><span class="line"> [<span class="number">6.</span> <span class="number">3.</span> <span class="number">5.</span>]]</span><br><span class="line">=================</span><br><span class="line">[[<span class="number">2.</span> <span class="number">2.</span> <span class="number">0.</span>]</span><br><span class="line"> [<span class="number">0.</span> <span class="number">3.</span> <span class="number">5.</span>]</span><br><span class="line"> [<span class="number">7.</span> <span class="number">4.</span> <span class="number">7.</span>]]</span><br><span class="line">=================</span><br><span class="line">[[<span class="number">3.</span> <span class="number">5.</span> <span class="number">6.</span> <span class="number">2.</span> <span class="number">2.</span> <span class="number">0.</span>]</span><br><span class="line"> [<span class="number">3.</span> <span class="number">2.</span> <span class="number">4.</span> <span class="number">0.</span> <span class="number">3.</span> <span class="number">5.</span>]</span><br><span class="line"> [<span class="number">6.</span> <span class="number">3.</span> <span class="number">5.</span> <span class="number">7.</span> <span class="number">4.</span> <span class="number">7.</span>]]</span><br><span class="line">=================</span><br><span class="line">[[<span class="number">4.</span> <span class="number">3.</span>]</span><br><span class="line"> [<span class="number">2.</span> <span class="number">8.</span>]]</span><br><span class="line">=================</span><br><span class="line">[[<span class="number">4.</span>]</span><br><span class="line"> [<span class="number">2.</span>]]</span><br><span class="line">=================</span><br><span class="line">[[<span class="number">3.</span>]</span><br><span class="line"> [<span class="number">8.</span>]]</span><br><span class="line">=================</span><br><span class="line">[[<span class="number">4.</span> <span class="number">3.</span>]</span><br><span class="line"> [<span class="number">2.</span> <span class="number">8.</span>]]</span><br><span class="line">=================</span><br><span class="line">[[<span class="number">4.</span> <span class="number">3.</span>]</span><br><span class="line"> [<span class="number">2.</span> <span class="number">8.</span>]]</span><br><span class="line">=================</span><br></pre></td></tr></table></figure><h2 id="矩阵的拆分"><a href="#矩阵的拆分" class="headerlink" title="矩阵的拆分"></a>矩阵的拆分</h2><h3 id="hsplit"><a href="#hsplit" class="headerlink" title="hsplit"></a>hsplit</h3><blockquote><p>原型：numpy.hsplit(ary, indices_or_sections)</p></blockquote><p>功能：将数组拆分为多个大小相等的子数组。使用hsplit，通过指定要返回的相同shape的array的数量，或者通过指定分割应该发生之后的列来沿着其横轴拆分原array</p><h4 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.arange(<span class="number">16.0</span>).reshape(<span class="number">4</span>, <span class="number">4</span>)</span><br><span class="line">print(x)</span><br><span class="line">print(<span class="string">"================="</span>)</span><br><span class="line">print(np.hsplit(x, <span class="number">2</span>))</span><br><span class="line">print(<span class="string">"================="</span>)</span><br><span class="line">print(np.hsplit(x, np.array([<span class="number">3</span>, <span class="number">6</span>])))</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[[ <span class="number">0.</span>  <span class="number">1.</span>  <span class="number">2.</span>  <span class="number">3.</span>]</span><br><span class="line"> [ <span class="number">4.</span>  <span class="number">5.</span>  <span class="number">6.</span>  <span class="number">7.</span>]</span><br><span class="line"> [ <span class="number">8.</span>  <span class="number">9.</span> <span class="number">10.</span> <span class="number">11.</span>]</span><br><span class="line"> [<span class="number">12.</span> <span class="number">13.</span> <span class="number">14.</span> <span class="number">15.</span>]]</span><br><span class="line">=================</span><br><span class="line">[array([[ <span class="number">0.</span>,  <span class="number">1.</span>],</span><br><span class="line">       [ <span class="number">4.</span>,  <span class="number">5.</span>],</span><br><span class="line">       [ <span class="number">8.</span>,  <span class="number">9.</span>],</span><br><span class="line">       [<span class="number">12.</span>, <span class="number">13.</span>]]), array([[ <span class="number">2.</span>,  <span class="number">3.</span>],</span><br><span class="line">       [ <span class="number">6.</span>,  <span class="number">7.</span>],</span><br><span class="line">       [<span class="number">10.</span>, <span class="number">11.</span>],</span><br><span class="line">       [<span class="number">14.</span>, <span class="number">15.</span>]])]</span><br><span class="line">=================</span><br><span class="line">[array([[ <span class="number">0.</span>,  <span class="number">1.</span>,  <span class="number">2.</span>],</span><br><span class="line">       [ <span class="number">4.</span>,  <span class="number">5.</span>,  <span class="number">6.</span>],</span><br><span class="line">       [ <span class="number">8.</span>,  <span class="number">9.</span>, <span class="number">10.</span>],</span><br><span class="line">       [<span class="number">12.</span>, <span class="number">13.</span>, <span class="number">14.</span>]]), array([[ <span class="number">3.</span>],</span><br><span class="line">       [ <span class="number">7.</span>],</span><br><span class="line">       [<span class="number">11.</span>],</span><br><span class="line">       [<span class="number">15.</span>]]), array([], shape=(<span class="number">4</span>, <span class="number">0</span>), dtype=float64)]</span><br></pre></td></tr></table></figure><h3 id="vstack-1"><a href="#vstack-1" class="headerlink" title="vstack"></a>vstack</h3><blockquote><p>原型：numpy.vstack(ary, indices_or_sections)</p></blockquote><p>功能：vsplit沿着垂直轴分割，其分割方式与hsplit用法相同。 </p><h4 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.arange(<span class="number">16.0</span>).reshape(<span class="number">4</span>, <span class="number">4</span>)</span><br><span class="line">print(x)</span><br><span class="line">print(<span class="string">"================="</span>)</span><br><span class="line">print(np.vsplit(x, <span class="number">2</span>))</span><br><span class="line">print(<span class="string">"================="</span>)</span><br><span class="line">print(np.vsplit(x, np.array([<span class="number">3</span>, <span class="number">6</span>])))</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[[ <span class="number">0.</span>  <span class="number">1.</span>  <span class="number">2.</span>  <span class="number">3.</span>]</span><br><span class="line"> [ <span class="number">4.</span>  <span class="number">5.</span>  <span class="number">6.</span>  <span class="number">7.</span>]</span><br><span class="line"> [ <span class="number">8.</span>  <span class="number">9.</span> <span class="number">10.</span> <span class="number">11.</span>]</span><br><span class="line"> [<span class="number">12.</span> <span class="number">13.</span> <span class="number">14.</span> <span class="number">15.</span>]]</span><br><span class="line">=================</span><br><span class="line">[array([[<span class="number">0.</span>, <span class="number">1.</span>, <span class="number">2.</span>, <span class="number">3.</span>],</span><br><span class="line">       [<span class="number">4.</span>, <span class="number">5.</span>, <span class="number">6.</span>, <span class="number">7.</span>]]), array([[ <span class="number">8.</span>,  <span class="number">9.</span>, <span class="number">10.</span>, <span class="number">11.</span>],</span><br><span class="line">       [<span class="number">12.</span>, <span class="number">13.</span>, <span class="number">14.</span>, <span class="number">15.</span>]])]</span><br><span class="line">=================</span><br><span class="line">[array([[ <span class="number">0.</span>,  <span class="number">1.</span>,  <span class="number">2.</span>,  <span class="number">3.</span>],</span><br><span class="line">       [ <span class="number">4.</span>,  <span class="number">5.</span>,  <span class="number">6.</span>,  <span class="number">7.</span>],</span><br><span class="line">       [ <span class="number">8.</span>,  <span class="number">9.</span>, <span class="number">10.</span>, <span class="number">11.</span>]]), array([[<span class="number">12.</span>, <span class="number">13.</span>, <span class="number">14.</span>, <span class="number">15.</span>]]), array([], shape=(<span class="number">0</span>, <span class="number">4</span>), dtype=float64)]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Numpy之矩阵的堆叠与拆分&quot;&gt;&lt;a href=&quot;#Numpy之矩阵的堆叠与拆分&quot; class=&quot;headerlink&quot; title=&quot;Numpy之矩阵的堆叠与拆分&quot;&gt;&lt;/a&gt;Numpy之矩阵的堆叠与拆分&lt;/h1&gt;&lt;h2 id=&quot;矩阵的堆叠&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>浅谈Numpy的shape和reshape</title>
    <link href="http://yoursite.com/2019/09/10/%E6%B5%85%E8%B0%88Numpy%E7%9A%84shape%E5%92%8Creshape/"/>
    <id>http://yoursite.com/2019/09/10/浅谈Numpy的shape和reshape/</id>
    <published>2019-09-10T03:27:57.000Z</published>
    <updated>2019-09-10T05:04:24.367Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浅谈Numpy的shape和reshape"><a href="#浅谈Numpy的shape和reshape" class="headerlink" title="浅谈Numpy的shape和reshape"></a>浅谈Numpy的shape和reshape</h1><p>@[toc]</p><h2 id="shape"><a href="#shape" class="headerlink" title="shape"></a>shape</h2><blockquote><p>原型：numpy.shape(array)</p></blockquote><p>shape 是 array的一个属性，它能获取矩阵的行列的维度</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">array1 = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])</span><br><span class="line">print(array1.shape)</span><br><span class="line"></span><br><span class="line">array2 = np.array([[<span class="number">2</span>,<span class="number">4</span>],[<span class="number">6</span>,<span class="number">8</span>],[<span class="number">0</span>,<span class="number">12</span>]])</span><br><span class="line">print(np.shape(array2))</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">(<span class="number">3</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><h2 id="reshape"><a href="#reshape" class="headerlink" title="reshape"></a>reshape</h2><blockquote><p>原型：numpy.reshape(array,newshape,order=’c’)</p></blockquote><p>array：原矩阵</p><p>newshape：整数值或整数元组。新的形状应该兼容于原始形状。如果是一个整数值，表示一个一维数组的长度；如果是元组，表示新数组的行和列数，一个元素值可以为-1，此时该元素值表示为指定，此时会从数组的长度和剩余的维度中推断出</p><p>order： {‘C’，’F’，’A’}，可选<br>使用此索引顺序读取a的元素，并使用此索引顺序将元素放入reshape d数组中。“C”表示使用类似C的索引顺序读取/写入元素，最后一个轴索引变化最快，返回到第一个轴索引变化最慢。’F’表示使用类似Fortran的索引顺序读/写元素，第一个索引变化最快，最后一个索引变化最慢。请注意，“C”和“F”选项不考虑底层数组的内存布局，只涉及索引的顺序。’A’表示以类似Fortran的索引顺序读取/写入元素，如果a在内存中是Fortran 连续的，否则是C-like顺序。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">array = np.array([[<span class="number">2</span>,<span class="number">4</span>],[<span class="number">6</span>,<span class="number">8</span>],[<span class="number">0</span>,<span class="number">12</span>]])</span><br><span class="line">print(array)</span><br><span class="line">print(array.reshape((<span class="number">2</span>, <span class="number">3</span>)))</span><br><span class="line">print(array)</span><br></pre></td></tr></table></figure><p>输出<br> <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> [[ <span class="number">2</span>  <span class="number">4</span>]</span><br><span class="line"> [ <span class="number">6</span>  <span class="number">8</span>]</span><br><span class="line"> [ <span class="number">0</span> <span class="number">12</span>]]</span><br><span class="line">[[ <span class="number">2</span>  <span class="number">4</span>  <span class="number">6</span>]</span><br><span class="line"> [ <span class="number">8</span>  <span class="number">0</span> <span class="number">12</span>]]</span><br><span class="line">[[ <span class="number">2</span>  <span class="number">4</span>]</span><br><span class="line"> [ <span class="number">6</span>  <span class="number">8</span>]</span><br><span class="line"> [ <span class="number">0</span> <span class="number">12</span>]]</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;浅谈Numpy的shape和reshape&quot;&gt;&lt;a href=&quot;#浅谈Numpy的shape和reshape&quot; class=&quot;headerlink&quot; title=&quot;浅谈Numpy的shape和reshape&quot;&gt;&lt;/a&gt;浅谈Numpy的shape和reshape&lt;/
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>OpenCV-Python小白进阶之鼠标事件</title>
    <link href="http://yoursite.com/2019/08/31/OpenCV-Python%E5%B0%8F%E7%99%BD%E8%BF%9B%E9%98%B6%E4%B9%8B%E9%BC%A0%E6%A0%87%E4%BA%8B%E4%BB%B6/"/>
    <id>http://yoursite.com/2019/08/31/OpenCV-Python小白进阶之鼠标事件/</id>
    <published>2019-08-31T09:26:22.000Z</published>
    <updated>2019-09-01T13:14:45.310Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OpenCV-Python小白进阶之鼠标事件"><a href="#OpenCV-Python小白进阶之鼠标事件" class="headerlink" title="OpenCV-Python小白进阶之鼠标事件"></a>OpenCV-Python小白进阶之鼠标事件</h1><h2 id="🖱鼠标️事件"><a href="#🖱鼠标️事件" class="headerlink" title="🖱鼠标️事件"></a>🖱鼠标️事件</h2><font size="4">EVENT_MOUSEMOVE 0            #滑动<p>EVENT_LBUTTONDOWN 1          #左键点击</p><p>EVENT_RBUTTONDOWN 2          #右键点击</p><p>EVENT_MBUTTONDOWN 3          #中键点击</p><p>EVENT_LBUTTONUP 4            #左键放开</p><p>EVENT_RBUTTONUP 5            #右键放开</p><p>EVENT_MBUTTONUP 6            #中键放开</p><p>EVENT_LBUTTONDBLCLK 7        #左键双击</p><p>EVENT_RBUTTONDBLCLK 8        #右键双击</p><p>EVENT_MBUTTONDBLCLK 9        #中键双击</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><blockquote><p>setMouseCallback（winname,onMouse,userdata）</p></blockquote><p>winname 窗口名称</p><p>onMouse 鼠标事件的回调函数。有关如何指定和使用回调的信息</p><p>userdata 传递给回调的可选参数</p></font><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">drawing = <span class="literal">False</span>  <span class="comment"># 如果按下鼠标，则为true</span></span><br><span class="line">mode = <span class="literal">True</span>      <span class="comment"># 如果为True，则绘制矩形。按'm'切换到曲线</span></span><br><span class="line">ix = <span class="number">-1</span></span><br><span class="line">iy = <span class="number">-1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw</span><span class="params">(event, x, y, flag, parm)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> ix, iy, drawing, mode</span><br><span class="line">    <span class="keyword">if</span> event == cv2.EVENT_LBUTTONDOWN:</span><br><span class="line">        drawing = <span class="literal">True</span></span><br><span class="line">        ix = x</span><br><span class="line">        iy = y</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> event == cv2.EVENT_MOUSEMOVE:</span><br><span class="line">        <span class="keyword">if</span> drawing:</span><br><span class="line">            <span class="keyword">if</span> mode:</span><br><span class="line">                cv2.rectangle(img, (ix, iy), (x, y), (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                cv2.circle(img, (ix, iy), <span class="number">50</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> event == cv2.EVENT_LBUTTONUP:</span><br><span class="line">        drawing = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> mode:</span><br><span class="line">            cv2.rectangle(img, (ix, iy), (x, y), (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cv2.circle(img, (ix, iy), <span class="number">50</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">img = np.zeros((<span class="number">512</span>, <span class="number">512</span>, <span class="number">3</span>), np.uint8)</span><br><span class="line">cv2.namedWindow(<span class="string">'image'</span>)</span><br><span class="line">cv2.setMouseCallback(<span class="string">'image'</span>, draw)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    cv2.imshow(<span class="string">'image'</span>, img)</span><br><span class="line">    k = cv2.waitKey(<span class="number">1</span>) &amp; <span class="number">0xff</span></span><br><span class="line">    <span class="keyword">if</span> k == ord(<span class="string">'m'</span>):</span><br><span class="line">        mode = <span class="keyword">not</span> mode</span><br><span class="line">    <span class="keyword">elif</span> k == <span class="number">27</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p><img src="/2019/08/31/OpenCV-Python小白进阶之鼠标事件/t0.png" alt="aratar"><br><img src="/2019/08/31/OpenCV-Python小白进阶之鼠标事件/t1.png" alt="aratar"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;OpenCV-Python小白进阶之鼠标事件&quot;&gt;&lt;a href=&quot;#OpenCV-Python小白进阶之鼠标事件&quot; class=&quot;headerlink&quot; title=&quot;OpenCV-Python小白进阶之鼠标事件&quot;&gt;&lt;/a&gt;OpenCV-Python小白进阶之鼠标
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>OpenCV-Python小白进阶之简单的绘图操作</title>
    <link href="http://yoursite.com/2019/08/23/OpenCV-Python%E5%B0%8F%E7%99%BD%E8%BF%9B%E9%98%B6%E4%B9%8B%E7%AE%80%E5%8D%95%E7%9A%84%E7%BB%98%E5%9B%BE%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2019/08/23/OpenCV-Python小白进阶之简单的绘图操作/</id>
    <published>2019-08-23T06:46:58.000Z</published>
    <updated>2019-08-24T01:56:11.211Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OpenCV-Python小白进阶之简单的绘图操作"><a href="#OpenCV-Python小白进阶之简单的绘图操作" class="headerlink" title="OpenCV-Python小白进阶之简单的绘图操作"></a>OpenCV-Python小白进阶之简单的绘图操作</h1><h2 id="line"><a href="#line" class="headerlink" title="line()"></a>line()</h2><p>原型：</p><pre><code>img=cv2.line(img, pt1, pt2, color[, thickness[, lineType[, shift]]])</code></pre><font size="4">参数<p>img    图片</p><p>pt1    线段的第一点</p><p>pt2    线段的第二点</p><p>color   线条颜色</p><p>thickness    线的粗细</p><p>lineType    线的类型</p><p>shift    点坐标中的小数位数<br></p></font><p></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">img = np.zeros((<span class="number">512</span>, <span class="number">512</span>, <span class="number">3</span>), np.uint8)</span><br><span class="line">cv2.line(img, (<span class="number">0</span>, <span class="number">0</span>), (<span class="number">511</span>, <span class="number">511</span>), (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    cv2.imshow(<span class="string">'image'</span>, img)</span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) == <span class="number">27</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p><img src="/2019/08/23/OpenCV-Python小白进阶之简单的绘图操作/t1.png" alt="aratar"></p><h2 id="rectangle"><a href="#rectangle" class="headerlink" title="rectangle()"></a>rectangle()</h2><p>原型：</p><pre><code>img    =cv2.rectangle(img, pt1, pt2, color[, thickness[, lineType[, shift]]])img    =cv2.rectangle(img, rec, color[, thickness[, lineType[, shift]]])</code></pre><font size="4">Parameters<p>img    图片</p><p>pt1    矩形的顶点</p><p>pt2    矩形的顶点与pt1相对</p><p>color    矩形颜色或亮度（灰度图像）</p><p>thickness    构成矩形的线条的粗细。负值（如FILLED）表示函数必须绘制填充矩形</p><p>lineType    线的类型。请参见LineTypes<br></p></font><p></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">img = np.zeros((<span class="number">512</span>, <span class="number">512</span>, <span class="number">3</span>), np.uint8)</span><br><span class="line">cv2.line(img, (<span class="number">0</span>, <span class="number">0</span>), (<span class="number">511</span>, <span class="number">511</span>), (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">5</span>)</span><br><span class="line">cv2.rectangle(img, (<span class="number">384</span>, <span class="number">0</span>), (<span class="number">510</span>, <span class="number">128</span>), (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    cv2.imshow(<span class="string">'image'</span>, img)</span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) == <span class="number">27</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p><img src="/2019/08/23/OpenCV-Python小白进阶之简单的绘图操作/t2.png" alt="aratar"></p><h2 id="circle"><a href="#circle" class="headerlink" title="circle()"></a>circle()</h2><p>原型：</p><pre><code>img    = cv2.circle(img, center, radius, color[, thickness[, lineType[, shift]]]    )</code></pre><font size="4">Parameters<p>img    绘制圆的图像</p><p>center    圆心</p><p>radius    圆的半径</p><p>color    圆形颜色</p><p>thickness    圆形轮廓的厚度，如果是正的。负值（如FILLED）表示要绘制实心圆。</p><p>lineType    圆边界的类型。请参见LineTypes</p><p>shift    中心坐标和半径值中的小数位数<br></p></font><p></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">img = np.zeros((<span class="number">512</span>, <span class="number">512</span>, <span class="number">3</span>), np.uint8)</span><br><span class="line"></span><br><span class="line">cv2.line(img, (<span class="number">0</span>, <span class="number">0</span>), (<span class="number">511</span>, <span class="number">511</span>), (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">5</span>)</span><br><span class="line">cv2.rectangle(img, (<span class="number">384</span>, <span class="number">0</span>), (<span class="number">510</span>, <span class="number">128</span>), (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">3</span>)</span><br><span class="line">cv2.circle(img, (<span class="number">447</span>, <span class="number">63</span>), <span class="number">63</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    cv2.imshow(<span class="string">'image'</span>, img)</span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) == <span class="number">27</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p><img src="/2019/08/23/OpenCV-Python小白进阶之简单的绘图操作/t3.png" alt="aratar"></p><h2 id="elipse"><a href="#elipse" class="headerlink" title="elipse()"></a>elipse()</h2><p>原型：</p><pre><code>img    =cv2.ellipse(img, center, axes, angle, startAngle, endAngle, color[, thickness[, lineType[, shift]]])img    =cv2.ellipse(img, box, color[, thickness[, lineType]])</code></pre><font size="4">Parameters<p>img    图片</p><p>center    椭圆的中心</p><p>axes    椭圆主轴大小的一半</p><p>angle    椭圆旋转角度（以度为单位)</p><p>startAngle    椭圆弧的起始角度（以度为单位)</p><p>endAngle    椭圆颜色</p><p>color    椭圆弧的轮廓粗细，如果是正的。否则，这表示将绘制填充的椭圆扇区</p><p>thickness    椭圆弧的轮廓粗细，如果是正的。否则，这表示将绘制填充的椭圆扇区。</p><p>lineType    椭圆边界的类型。请参见LineTypes</p><p>shift    中心坐标和轴值的小数位数</p></font><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">img = np.zeros((<span class="number">512</span>, <span class="number">512</span>, <span class="number">3</span>), np.uint8)</span><br><span class="line"></span><br><span class="line">cv2.line(img, (<span class="number">0</span>, <span class="number">0</span>), (<span class="number">511</span>, <span class="number">511</span>), (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">5</span>)</span><br><span class="line">cv2.rectangle(img, (<span class="number">384</span>, <span class="number">0</span>), (<span class="number">510</span>, <span class="number">128</span>), (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">3</span>)</span><br><span class="line">cv2.circle(img, (<span class="number">447</span>, <span class="number">63</span>), <span class="number">63</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">3</span>)</span><br><span class="line">cv2.ellipse(img, (<span class="number">256</span>, <span class="number">256</span>), (<span class="number">100</span>, <span class="number">50</span>), <span class="number">0</span>, <span class="number">0</span>, <span class="number">180</span>, <span class="number">255</span>, <span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    cv2.imshow(<span class="string">'image'</span>, img)</span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) == <span class="number">27</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p><img src="/2019/08/23/OpenCV-Python小白进阶之简单的绘图操作/t4.png" alt="aratar"></p><h2 id="ploylines"><a href="#ploylines" class="headerlink" title="ploylines()"></a>ploylines()</h2><p>原型：</p><pre><code>img=cv2.polylines(img, pts, isClosed, color[, thickness[, lineType[, shift]]])</code></pre><font size="4">Parametersimg    图片<p>pts    多边形曲线的数组</p><p>isClosed    指示绘制的折线是否关闭的标记。如果它们被关闭，则该函数从每条曲线的最后一个顶点到其第一个顶点绘制一条线</p><p>color    折线颜色</p><p>thickness    折线边缘的厚度</p><p>lineType    线段的类型 请参见LineTypes</p><p>shift    顶点坐标中的小数位数<br></p></font><p></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">img = np.zeros((<span class="number">512</span>, <span class="number">512</span>, <span class="number">3</span>), np.uint8)</span><br><span class="line"></span><br><span class="line">cv2.line(img, (<span class="number">0</span>, <span class="number">0</span>), (<span class="number">511</span>, <span class="number">511</span>), (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">5</span>)</span><br><span class="line">cv2.rectangle(img, (<span class="number">384</span>, <span class="number">0</span>), (<span class="number">510</span>, <span class="number">128</span>), (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">3</span>)</span><br><span class="line">cv2.circle(img, (<span class="number">447</span>, <span class="number">63</span>), <span class="number">63</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">3</span>)</span><br><span class="line">cv2.ellipse(img, (<span class="number">256</span>, <span class="number">256</span>), (<span class="number">100</span>, <span class="number">50</span>), <span class="number">0</span>, <span class="number">0</span>, <span class="number">180</span>, <span class="number">255</span>, <span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">pts = np.array([[<span class="number">10</span>, <span class="number">5</span>], [<span class="number">20</span>, <span class="number">30</span>], [<span class="number">70</span>, <span class="number">20</span>], [<span class="number">50</span>, <span class="number">10</span>]], np.int32)</span><br><span class="line">pts = pts.reshape((<span class="number">-1</span>, <span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">cv2.polylines(img, [pts], <span class="literal">True</span>, (<span class="number">0</span>,<span class="number">255</span>,<span class="number">255</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    cv2.imshow(<span class="string">'image'</span>, img)</span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) == <span class="number">27</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><h2 id="putText"><a href="#putText" class="headerlink" title="putText()"></a>putText()</h2><p>原型：</p><pre><code>img    = cv.putText(img, text, org, fontFace, fontScale, color[, thickness[, lineType[, bottomLeftOrigin]]])</code></pre><font size="4">img    图片<p>text    要绘制的文本字符串</p><p>org    图像中文本字符串的左下角</p><p>fontFace    字体类型</p><p>fontScale    字体比例因子乘以字体特定的基本大小</p><p>color    文字颜色</p><p>thickness    用于绘制文本的线条的粗细</p><p>lineType    线型</p><p>bottomLeftOrigin    如果为true，则图像数据原点位于左下角。否则，它位于左上角。<br></p></font><p></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">img = np.zeros((<span class="number">512</span>, <span class="number">512</span>, <span class="number">3</span>), np.uint8)</span><br><span class="line"></span><br><span class="line">cv2.line(img, (<span class="number">0</span>, <span class="number">0</span>), (<span class="number">511</span>, <span class="number">511</span>), (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">5</span>)</span><br><span class="line">cv2.rectangle(img, (<span class="number">384</span>, <span class="number">0</span>), (<span class="number">510</span>, <span class="number">128</span>), (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">3</span>)</span><br><span class="line">cv2.circle(img, (<span class="number">447</span>, <span class="number">63</span>), <span class="number">63</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">3</span>)</span><br><span class="line">cv2.ellipse(img, (<span class="number">256</span>, <span class="number">256</span>), (<span class="number">100</span>, <span class="number">50</span>), <span class="number">0</span>, <span class="number">0</span>, <span class="number">180</span>, <span class="number">255</span>, <span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">pts = np.array([[<span class="number">10</span>, <span class="number">5</span>], [<span class="number">20</span>, <span class="number">30</span>], [<span class="number">70</span>, <span class="number">20</span>], [<span class="number">50</span>, <span class="number">10</span>]], np.int32)</span><br><span class="line">pts = pts.reshape((<span class="number">-1</span>, <span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">cv2.polylines(img, [pts], <span class="literal">True</span>, (<span class="number">0</span>,<span class="number">255</span>,<span class="number">255</span>))</span><br><span class="line"></span><br><span class="line">font = cv2.FONT_HERSHEY_COMPLEX</span><br><span class="line">cv2.putText(img, <span class="string">'OpenCV'</span>, (<span class="number">10</span>, <span class="number">500</span>), font, <span class="number">4</span>, (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>), <span class="number">2</span>, cv2.LINE_AA)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    cv2.imshow(<span class="string">'image'</span>, img)</span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) == <span class="number">27</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p><img src="/2019/08/23/OpenCV-Python小白进阶之简单的绘图操作/t5.png" alt="aratar"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;OpenCV-Python小白进阶之简单的绘图操作&quot;&gt;&lt;a href=&quot;#OpenCV-Python小白进阶之简单的绘图操作&quot; class=&quot;headerlink&quot; title=&quot;OpenCV-Python小白进阶之简单的绘图操作&quot;&gt;&lt;/a&gt;OpenCV-Pyth
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>OpenCV-Python小白进阶之图片的融合</title>
    <link href="http://yoursite.com/2019/08/18/OpenCV-Python%E5%B0%8F%E7%99%BD%E8%BF%9B%E9%98%B6%E4%B9%8B%E5%9B%BE%E7%89%87%E7%9A%84%E8%9E%8D%E5%90%88/"/>
    <id>http://yoursite.com/2019/08/18/OpenCV-Python小白进阶之图片的融合/</id>
    <published>2019-08-18T08:57:34.000Z</published>
    <updated>2019-08-18T10:16:10.070Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OpenCV-Python小白进阶之图片的融合"><a href="#OpenCV-Python小白进阶之图片的融合" class="headerlink" title="OpenCV-Python小白进阶之图片的融合"></a>OpenCV-Python小白进阶之图片的融合</h1><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>cv2.resize()</p><blockquote><p><a href="https://wgowi.github.io/2019/08/18/OpenCV-Python%E5%B0%8F%E7%99%BD%E8%BF%9B%E9%98%B6%E4%B9%8B%E5%9B%BE%E7%89%87%E7%9A%84%E4%BC%B8%E7%BC%A9%E5%8F%98%E6%8D%A2/#more" target="_blank" rel="noopener">https://wgowi.github.io/2019/08/18/OpenCV-Python%E5%B0%8F%E7%99%BD%E8%BF%9B%E9%98%B6%E4%B9%8B%E5%9B%BE%E7%89%87%E7%9A%84%E4%BC%B8%E7%BC%A9%E5%8F%98%E6%8D%A2/#more</a></p></blockquote><p>cv2.addWeighted(img1, x, img2, y, 0)</p><p>把img1与img2按xy的比重融合</p><p>cv2.add(img1,img2)</p><p>将img1与img2按1:1融合</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">img1 = cv2.imread(<span class="string">'a.jpg'</span>)</span><br><span class="line">img2 = cv2.imread(<span class="string">'cv.jpg'</span>)</span><br><span class="line"></span><br><span class="line">img3 = cv2.resize(img1, (<span class="number">400</span>, <span class="number">400</span>))</span><br><span class="line">img4 = cv2.resize(img2, (<span class="number">400</span>, <span class="number">400</span>))</span><br><span class="line"></span><br><span class="line">img5 = cv2.addWeighted(img3, <span class="number">0.5</span>, img4, <span class="number">0.5</span>, <span class="number">0</span>)</span><br><span class="line">img6 = cv2.add(img3,img4)</span><br><span class="line">img7 = cv2.addWeighted(img4, <span class="number">1</span>, img3, <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">cv2.imshow(<span class="string">'img5'</span>, img5)</span><br><span class="line">cv2.imshow(<span class="string">'img6'</span>, img6)</span><br><span class="line">cv2.imshow(<span class="string">'img7'</span>, img7)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) == <span class="number">27</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p><img src="/2019/08/18/OpenCV-Python小白进阶之图片的融合/t1.png" alt="aratar"><br><img src="/2019/08/18/OpenCV-Python小白进阶之图片的融合/t2.png" alt="aratar"><br><img src="/2019/08/18/OpenCV-Python小白进阶之图片的融合/t3.png" alt="aratar"></p><p>由此可知cv2.addweighted()img1和img2的比重都为1时与cv2.add()相同</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;OpenCV-Python小白进阶之图片的融合&quot;&gt;&lt;a href=&quot;#OpenCV-Python小白进阶之图片的融合&quot; class=&quot;headerlink&quot; title=&quot;OpenCV-Python小白进阶之图片的融合&quot;&gt;&lt;/a&gt;OpenCV-Python小白进阶
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>OpenCV-Python小白进阶之图片的伸缩变换</title>
    <link href="http://yoursite.com/2019/08/18/OpenCV-Python%E5%B0%8F%E7%99%BD%E8%BF%9B%E9%98%B6%E4%B9%8B%E5%9B%BE%E7%89%87%E7%9A%84%E4%BC%B8%E7%BC%A9%E5%8F%98%E6%8D%A2/"/>
    <id>http://yoursite.com/2019/08/18/OpenCV-Python小白进阶之图片的伸缩变换/</id>
    <published>2019-08-18T08:17:16.000Z</published>
    <updated>2019-08-18T08:53:50.770Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OpenCV-Python小白进阶之图片的伸缩变换"><a href="#OpenCV-Python小白进阶之图片的伸缩变换" class="headerlink" title="OpenCV-Python小白进阶之图片的伸缩变换"></a>OpenCV-Python小白进阶之图片的伸缩变换</h1><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><blockquote><p>cv2.resize(InputArray src, OutputArray dst, Size, fx, fy, interpolation)</p></blockquote><p><font size="5">参数：</font></p><font color="#ff000," size="4">InputArray src：输入图片<p>OutputArray dst：输出图片</p><p>Size：输出图片尺寸</p><p>fx, fy：    沿x轴，y轴的缩放系数<br></p></font><p></p><p><font size="5">interpolation：    插入方式</font></p><font color="#ff000," size="4">interpolation： 选项所用的插值方法：<p>INTER_NEAREST：最近邻插值</p><p>INTER_LINEAR：双线性插值（默认设置）</p><p>INTER_AREA：使用像素区域关系进行重采样。</p><p>INTER_CUBIC：4x4像素邻域的双三次插值</p><p>INTER_LANCZOS4：8x8像素邻域的Lanczos插值<br></p></font><p></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2> <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">img0 = cv2.imread(<span class="string">'a.jpg'</span>)</span><br><span class="line">img1 = cv2.resize(img0, (<span class="number">600</span>, <span class="number">400</span>), interpolation=cv2.INTER_NEAREST)</span><br><span class="line">img2 = cv2.resize(img0, (<span class="number">0</span>,<span class="number">0</span>),fx=<span class="number">0.1</span>, fy=<span class="number">0.1</span>, interpolation=cv2.INTER_NEAREST)</span><br><span class="line">img3 = cv2.resize(img2,(<span class="number">0</span>,<span class="number">0</span>),fx=<span class="number">2</span>,fy=<span class="number">2</span>, interpolation=cv2.INTER_NEAREST)</span><br><span class="line"></span><br><span class="line">cv2.imshow(<span class="string">'img0'</span>,img0)</span><br><span class="line">cv2.imshow(<span class="string">'img1'</span>,img1)</span><br><span class="line">cv2.imshow(<span class="string">'img2'</span>,img2)</span><br><span class="line">cv2.imshow(<span class="string">'img3'</span>,img3)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">True</span>):</span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">0</span>) == <span class="number">27</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p><img src="/2019/08/18/OpenCV-Python小白进阶之图片的伸缩变换/t0.png" alt="aratar"><br><img src="/2019/08/18/OpenCV-Python小白进阶之图片的伸缩变换/t1.png" alt="aratar"><br><img src="/2019/08/18/OpenCV-Python小白进阶之图片的伸缩变换/t2.png" alt="aratar"><br><img src="/2019/08/18/OpenCV-Python小白进阶之图片的伸缩变换/t3.png" alt="aratar"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;OpenCV-Python小白进阶之图片的伸缩变换&quot;&gt;&lt;a href=&quot;#OpenCV-Python小白进阶之图片的伸缩变换&quot; class=&quot;headerlink&quot; title=&quot;OpenCV-Python小白进阶之图片的伸缩变换&quot;&gt;&lt;/a&gt;OpenCV-Pyth
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>OpenCV-Python小白进阶之位运算与掩膜</title>
    <link href="http://yoursite.com/2019/08/18/OpenCV-Python%E5%B0%8F%E7%99%BD%E8%BF%9B%E9%98%B6%E4%B9%8B%E4%BD%8D%E8%BF%90%E7%AE%97%E4%B8%8E%E6%8E%A9%E8%86%9C/"/>
    <id>http://yoursite.com/2019/08/18/OpenCV-Python小白进阶之位运算与掩膜/</id>
    <published>2019-08-18T02:38:56.000Z</published>
    <updated>2019-08-18T07:46:50.920Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OpenCV-Python小白进阶之位运算与掩膜"><a href="#OpenCV-Python小白进阶之位运算与掩膜" class="headerlink" title="OpenCV-Python小白进阶之位运算与掩膜"></a>OpenCV-Python小白进阶之位运算与掩膜</h1><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><p> 由于图片是有一个个0和1组成的，所以OpenCV中对图像也支持为运算（与或非等）</p> <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dst = cv2.bitwise_and(src1，src2[，dst[，mask]])</span><br><span class="line">dst= cv2.bitwise_not(src[, dst[, mask]])</span><br><span class="line">dst= cv2.bitwise_or(src1, src2[, dst[, mask]])</span><br><span class="line">dst= cv2.bitwise_xor(src1, src2[, dst[, mask]])</span><br></pre></td></tr></table></figure> <font color="#FF00," size="3"> bitwise_and是对二进制数据进行“与”操作，即对图像（灰度图像或彩色图像均可）每个像素值进行二进制“与”操作，1&1=1，1&0=0，0&1=0，0&0=0<p>bitwise_or是对二进制数据进行“或”操作，即对图像（灰度图像或彩色图像均可）每个像素值进行二进制“或”操作，1|1=1，1|0=0，0|1=0，0|0=0</p><p>bitwise_xor是对二进制数据进行“异或”操作，即对图像（灰度图像或彩色图像均可）每个像素值进行二进制“异或”操作，1^1=0,1^0=1,0^1=1,0^0=0</p><p>bitwise_not是对二进制数据进行“非”操作，即对图像（灰度图像或彩色图像均可）每个像素值进行二进制“非”操作，<del>1=0，</del>0=1<br></p></font><p></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">'cv.jpg'</span>)</span><br><span class="line"><span class="comment"># cv2.imshow('image',img)</span></span><br><span class="line"></span><br><span class="line">rectangle = np.zeros(img.shape[<span class="number">0</span>:<span class="number">2</span>], dtype=<span class="string">'uint8'</span>)</span><br><span class="line">cv2.rectangle(rectangle, (<span class="number">25</span>, <span class="number">25</span>), (<span class="number">275</span>, <span class="number">275</span>), <span class="number">255</span>, <span class="number">-1</span>)</span><br><span class="line">cv2.imshow(<span class="string">'rectangle'</span>, rectangle)</span><br><span class="line"></span><br><span class="line">circle = np.zeros(img.shape[<span class="number">0</span>:<span class="number">2</span>], dtype=<span class="string">'uint8'</span>)</span><br><span class="line">cv2.circle(circle, (<span class="number">150</span>, <span class="number">150</span>), <span class="number">150</span>, <span class="number">255</span>, <span class="number">-1</span>)</span><br><span class="line">cv2.imshow(<span class="string">'circle'</span>, circle)</span><br><span class="line"></span><br><span class="line">bit_and = cv2.bitwise_and(rectangle, circle)</span><br><span class="line">cv2.imshow(<span class="string">'and'</span>, bit_and)</span><br><span class="line"></span><br><span class="line">bit_or = cv2.bitwise_or(rectangle, circle)</span><br><span class="line">cv2.imshow(<span class="string">'or'</span>, bit_or)</span><br><span class="line"></span><br><span class="line">bit_xor = cv2.bitwise_xor(rectangle, circle)</span><br><span class="line">cv2.imshow(<span class="string">'xor'</span>, bit_xor)</span><br><span class="line"></span><br><span class="line">bit_not1 = cv2.bitwise_not(rectangle)</span><br><span class="line">cv2.imshow(<span class="string">'not1'</span>, bit_not1)</span><br><span class="line"></span><br><span class="line">bit_not2 = cv2.bitwise_not(circle)</span><br><span class="line">cv2.imshow(<span class="string">'not2'</span>, bit_not2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">True</span>):</span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">0</span>)==<span class="number">27</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p><img src="/2019/08/18/OpenCV-Python小白进阶之位运算与掩膜/t1.png" alt="aratar"><br><img src="/2019/08/18/OpenCV-Python小白进阶之位运算与掩膜/t2.png" alt="aratar"><br><img src="/2019/08/18/OpenCV-Python小白进阶之位运算与掩膜/t3.png" alt="aratar"><br><img src="/2019/08/18/OpenCV-Python小白进阶之位运算与掩膜/t4.png" alt="aratar"><br><img src="/2019/08/18/OpenCV-Python小白进阶之位运算与掩膜/t5.png" alt="aratar"><br><img src="/2019/08/18/OpenCV-Python小白进阶之位运算与掩膜/t6.png" alt="aratar"><br><img src="/2019/08/18/OpenCV-Python小白进阶之位运算与掩膜/t7.png" alt="aratar"></p><h2 id="掩膜"><a href="#掩膜" class="headerlink" title="掩膜"></a>掩膜</h2><p>用选定的图像、图形或物体，对处理的图像（全部或局部）进行遮挡，来控制图像处理的区域或处理过程。用于覆盖的特定图像或物体称为掩模或模板。光学图像处理中,掩模可以是胶片、滤光片等。数字图像处理中,掩模为二维矩阵数组,有时也用多值图像。</p><p>数字图像处理中，图像掩模主要用于：</p><p>①提取感兴趣区,用预先制作的感兴趣区掩模与待处理图像相乘,得到感兴趣区图像,感兴趣区内图像值保持不变,而区外图像值都为0。</p><p>②屏蔽作用,用掩模对图像上某些区域作屏蔽,使其不参加处理或不参加处理参数的计算,或仅对屏蔽区作处理或统计。</p><p>③结构特征提取,用相似性变量或图像匹配方法检测和提取图像中与掩模相似的结构特征。</p><p>④特殊形状图像的制作。<br>掩膜是一种图像滤镜的模板，实用掩膜经常处理的是遥感图像。当提取道路或者河流，或者房屋时，通过一个n*n的矩阵来对图像进行像素过滤，然后将我们需要的地物或者标志突出显示出来。这个矩阵就是一种掩膜。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"></span><br><span class="line">cv.namedWindow(<span class="string">'image'</span>, <span class="number">0</span>)</span><br><span class="line">cv.resizeWindow(<span class="string">'image'</span>, <span class="number">720</span>, <span class="number">480</span>)</span><br><span class="line"><span class="comment"># 加载两张图片</span></span><br><span class="line">img1 = cv.imread(<span class="string">'a.jpg'</span>)</span><br><span class="line">img2 = cv.imread(<span class="string">'a.jpeg'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我想在左上角放置标识，所以我创建了一个ROI</span></span><br><span class="line">rows,cols,channels = img2.shape</span><br><span class="line">roi = img1[<span class="number">0</span>:rows, <span class="number">0</span>:cols ]</span><br><span class="line"><span class="comment"># 现在创建一个徽标掩码并创建其反转掩码</span></span><br><span class="line">img2gray = cv.cvtColor(img2,cv.COLOR_BGR2GRAY)</span><br><span class="line">ret, mask = cv.threshold(img2gray, <span class="number">10</span>, <span class="number">255</span>, cv.THRESH_BINARY)</span><br><span class="line">mask_inv = cv.bitwise_not(mask)</span><br><span class="line"><span class="comment"># 现在使ROI中的徽标区域变黑</span></span><br><span class="line">img1_bg = cv.bitwise_and(roi,roi,mask = mask_inv)</span><br><span class="line"><span class="comment"># 仅从徽标图像中获取徽标区域。</span></span><br><span class="line">img2_fg = cv.bitwise_and(img2,img2,mask = mask)</span><br><span class="line"><span class="comment"># 在ROI中放置徽标并修改主图像</span></span><br><span class="line">dst = cv.add(img1_bg,img2_fg)</span><br><span class="line">img1[<span class="number">0</span>:rows, <span class="number">0</span>:cols ] = dst</span><br><span class="line">cv.imshow(<span class="string">'image'</span>,img1)</span><br><span class="line">cv.waitKey(<span class="number">0</span>)</span><br><span class="line">cv.destroyAllWindows()</span><br></pre></td></tr></table></figure><p><img src="/2019/08/18/OpenCV-Python小白进阶之位运算与掩膜/cv1.jpg" alt="aratar"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;OpenCV-Python小白进阶之位运算与掩膜&quot;&gt;&lt;a href=&quot;#OpenCV-Python小白进阶之位运算与掩膜&quot; class=&quot;headerlink&quot; title=&quot;OpenCV-Python小白进阶之位运算与掩膜&quot;&gt;&lt;/a&gt;OpenCV-Python小
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>OpenCv-Python小白进阶之进度条createTrackbar</title>
    <link href="http://yoursite.com/2019/08/17/OpenCv-Python%E5%B0%8F%E7%99%BD%E8%BF%9B%E9%98%B6%E4%B9%8B%E8%BF%9B%E5%BA%A6%E6%9D%A1createTrackbar/"/>
    <id>http://yoursite.com/2019/08/17/OpenCv-Python小白进阶之进度条createTrackbar/</id>
    <published>2019-08-17T09:30:18.000Z</published>
    <updated>2019-08-17T15:02:32.460Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OpenCv-Python小白进阶之进度条createTrackbar"><a href="#OpenCv-Python小白进阶之进度条createTrackbar" class="headerlink" title="OpenCv-Python小白进阶之进度条createTrackbar"></a>OpenCv-Python小白进阶之进度条createTrackbar</h1><h2 id="createTrackbar"><a href="#createTrackbar" class="headerlink" title="createTrackbar"></a>createTrackbar</h2><p><font color="##FF0000">int createTrackbar(const string&amp; trackbarname, const string&amp;winname, int* value,  int count ，TrackbarCallback onChange = 0,  void* userdata = 0)</font>       </p><p>参数1：轨迹条名字</p><p>参数2：窗口名字</p><p>参数3：滑块初始位置</p><p>参数4：表示滑块达到最大位置的值</p><p>参数5：默认值为0，指向回调函数</p><p>参数6：默认值为0，用户传给回调函数的数据值</p><h2 id="getTrackbar"><a href="#getTrackbar" class="headerlink" title="getTrackbar"></a>getTrackbar</h2><p><font color="#FF0000">int getTrackbarPos(const string&amp; trackbarname, const string&amp; winname)</font></p><p>函数作用：</p><p>获取滑动条的位置的值</p><p>参数1:进度条名称</p><p>参数2:窗口名称</p><p>返回值：进度条位置</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">'a.jpg'</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> img.size</span><br><span class="line"><span class="keyword">print</span> img.dtype</span><br><span class="line"></span><br><span class="line">cv2.namedWindow(<span class="string">'image'</span>, <span class="number">0</span>)</span><br><span class="line">cv2.resizeWindow(<span class="string">'image'</span>, <span class="number">720</span>, <span class="number">480</span>)</span><br><span class="line"></span><br><span class="line">cv2.createTrackbar(<span class="string">'num'</span>,<span class="string">'image'</span>,<span class="number">0</span>,<span class="number">255</span>,<span class="keyword">lambda</span> x: <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">    num = cv2.getTrackbarPos(<span class="string">'num'</span>,<span class="string">'image'</span>)</span><br><span class="line">    ret, thresh1 = cv2.threshold(img, num, <span class="number">255</span>, cv2.THRESH_BINARY)</span><br><span class="line">    cv2.imshow(<span class="string">'image'</span>, thresh1)</span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) == <span class="number">27</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p><img src="/2019/08/17/OpenCv-Python小白进阶之进度条createTrackbar/t0.png" alt="aratar"></p><p><img src="/2019/08/17/OpenCv-Python小白进阶之进度条createTrackbar/t1.png" alt="aratar"></p><p><img src="/2019/08/17/OpenCv-Python小白进阶之进度条createTrackbar/t2.png" alt="aratar"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;OpenCv-Python小白进阶之进度条createTrackbar&quot;&gt;&lt;a href=&quot;#OpenCv-Python小白进阶之进度条createTrackbar&quot; class=&quot;headerlink&quot; title=&quot;OpenCv-Python小白进阶之进度条c
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>OpenCV-Python小白进阶之图像固定阈值二值化处理threshold</title>
    <link href="http://yoursite.com/2019/08/17/OpenCV-Python%E5%B0%8F%E7%99%BD%E8%BF%9B%E9%98%B6%E4%B9%8B%E5%9B%BE%E5%83%8F%E5%9B%BA%E5%AE%9A%E9%98%88%E5%80%BC%E4%BA%8C%E5%80%BC%E5%8C%96%E5%A4%84%E7%90%86threshold/"/>
    <id>http://yoursite.com/2019/08/17/OpenCV-Python小白进阶之图像固定阈值二值化处理threshold/</id>
    <published>2019-08-17T08:41:26.000Z</published>
    <updated>2019-08-17T15:15:46.060Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OpenCV-Python小白进阶之图像固定阈值二值化处理threshold"><a href="#OpenCV-Python小白进阶之图像固定阈值二值化处理threshold" class="headerlink" title="OpenCV-Python小白进阶之图像固定阈值二值化处理threshold"></a>OpenCV-Python小白进阶之图像固定阈值二值化处理threshold</h1><h2 id="二值化"><a href="#二值化" class="headerlink" title="二值化"></a>二值化</h2><p><font color="#FF00">定义：图像的二值化，就是将图像上的像素点的灰度值设置为0或255，也就是将整个图像呈现出明显的只有黑和白的视觉效果。灰度值0：黑，灰度值255：白</font></p><p>   一幅图像包括目标物体、背景还有噪声，要想从多值的数字图像中直接提取出目标物体，常用的方法就是设定一个阈值T，用T将图像的数据分成两部分：大于T的像素群和小于T的像素群。这是研究灰度变换的最特殊的方法，称为图像的二值化（Binarization）。</p><h2 id="threshold"><a href="#threshold" class="headerlink" title="threshold"></a>threshold</h2><p> cv2.threshold(img, threshold, maxval,type)</p><p>其中：</p><p>threshold是设定的阈值</p><p>maxval是当灰度值大于（或小于）阈值时将该灰度值赋成的值</p><p>type规定的是当前二值化的方式</p><p><img src="/2019/08/17/OpenCV-Python小白进阶之图像固定阈值二值化处理threshold/t0.png" alt="aratar"></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">img1 = cv2.imread(<span class="string">'opencv.png'</span>, cv2.IMREAD_GRAYSCALE)</span><br><span class="line"><span class="comment"># cv2.THRESH_OTSU   作为图像自适应二值化的一个很优的算法Otsu大津算法的参数</span></span><br><span class="line">ret, binary = cv2.threshold(img1, <span class="number">175</span>, <span class="number">255</span>, cv2.THRESH_BINARY)</span><br><span class="line"><span class="comment"># cv2.THRESH_BINARY    大于阈值的部分被置为255，小于部分被置为0</span></span><br><span class="line">ret, binaryinv = cv2.threshold(img1, <span class="number">175</span>, <span class="number">255</span>, cv2.THRESH_BINARY_INV)</span><br><span class="line"><span class="comment"># cv2.THRESH_BINARY_INV    大于阈值部分被置为0，小于部分被置为255</span></span><br><span class="line">ret, trunc = cv2.threshold(img1, <span class="number">175</span>, <span class="number">255</span>, cv2.THRESH_TRUNC)</span><br><span class="line"><span class="comment"># cv2.THRESH_TRUNC     大于阈值部分被置为threshold，小于部分保持原样</span></span><br><span class="line">ret, tozero = cv2.threshold(img1, <span class="number">175</span>, <span class="number">255</span>, cv2.THRESH_TOZERO)</span><br><span class="line"><span class="comment"># cv2.THRESH_TOZERO   小于阈值部分被置为0，大于部分保持不变</span></span><br><span class="line">ret, tozeroinv = cv2.threshold(img1, <span class="number">175</span>, <span class="number">255</span>, cv2.THRESH_TOZERO_INV)</span><br><span class="line"><span class="comment"># cv2.THRESH_TOZERO_INV    大于阈值部分被置为0，小于部分保持不变</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    cv2.imshow(<span class="string">'img1'</span>, img1)</span><br><span class="line">    cv2.imshow(<span class="string">'binary'</span>, binary)</span><br><span class="line">    cv2.imshow(<span class="string">'binaryinv'</span>, binaryinv)</span><br><span class="line">    cv2.imshow(<span class="string">'trunc'</span>, trunc)</span><br><span class="line">    cv2.imshow(<span class="string">'tozero'</span>, tozero)</span><br><span class="line">    cv2.imshow(<span class="string">'tozeroinv'</span>, tozeroinv)</span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) == <span class="number">27</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p><img src="/2019/08/17/OpenCV-Python小白进阶之图像固定阈值二值化处理threshold/t1.png" alt="aratar"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;OpenCV-Python小白进阶之图像固定阈值二值化处理threshold&quot;&gt;&lt;a href=&quot;#OpenCV-Python小白进阶之图像固定阈值二值化处理threshold&quot; class=&quot;headerlink&quot; title=&quot;OpenCV-Python小白进
      
    
    </summary>
    
    
  </entry>
  
</feed>
